@page
@model Teamber.Pages.Employees.TakeQuestionnaireModel
@{
    ViewData["Title"] = "Take Questionnaire";
    if (String.IsNullOrEmpty(Model.Login))
         Response.Redirect("/Login/Login");

}
<link href="@Url.Content("~/css/TakeQuestionnaire.css")" rel="stylesheet" type="text/css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.3/jquery.min.js"></script>

<h1>Take questionnaire</h1>
<h4>@Html.DisplayFor(model => model.Employee.FullName)</h4>

<hr />
<div class="row">
    <div class="col-md-8">

        <form method="post" onsubmit=" return ValidateCheckboxes()">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Employee.ID" />

            <h4>Personality type</h4>
            <div class="form-group">
                <select name="Employee.PersonalityType" required>
                    <option value="">Select a type</option>
                    @{ string[] personalityTypes = { "ISTJ", "INFJ", "INTJ", "ENFJ", "ISTP", "ESFJ", "INFP", "ESFP", "ENFP", "ESTP", "ESTJ", "ENTJ", "INTP", "ISFJ", "ENTP", "ISFP" };
                        int cnt1 = 0;
                        foreach (var personality in personalityTypes)
                        {
                        <option value="@(Html.Raw(personality))" name="Employee.PersonalityType">@(Html.Raw(personality))</option>
                        cnt1++;
                        }
                    }
                </select>
                <p>Take the <a href="https://www.16personalities.com/" target="_blank">Personality test</a> and enter your personality-type</p>
            </div>
            <hr />

            <h4>Competences</h4>
            <br />
            <p>Evaluate your own competences for the following areas.</p>
            <div class="form-group">
                <table id="competenceRating">

                    <!-- Rating values-->
                    <tr>
                        <th></th>
                        <th>None</th>
                        <th>Basic</th>
                        <th>Intermediate</th>
                        <th>Proficient</th>
                        <th>Expert</th>
                    </tr>

                    <!-- Itterator that gives each checkbox group a unique class, so the javascript can refference it and only make one checkbox clickable in each group-->
                    @{ int cnt = 1;
                        foreach (var competence in Model.AssignedEmployeeCompetenceDataList)
                        {

                        // Hidden refference to assign elements correctly
                        <input type="hidden" name="selectedCompetences" value="@competence.QuestionnaireCompetenceID" />
                        <tr>

                            <!--Component name-->
                            <td>@competence.Criteria</td>

                            <!-- five checkboxes for each component -->
                            @for (int i = 1; i < 6; i++)
                            {
                            <td>
                                <label class="containercheck">
                                    <input type="checkbox" class="option@(Html.Raw(cnt))" value="@(Html.Raw(i))" name="selectedCompetencesValue" required>
                                    <span class="checkmark"></span>
                                </label>
                            </td>

                            <!--Only make it possible to check one checkbox in each row -->
                            <script type="text/javascript">
                                                $('.option@(Html.Raw(cnt))').on('change', function () {
                                                    $('.option@(Html.Raw(cnt))').not(this).prop('checked', false);
                                                });
                            </script>
                            }
                        </tr>
                        cnt++;
                        }
                    }
                </table>
            </div>
            <hr />

            <!--Because of the unorthodox checkbox setup, we need a dedicated Validation method for the checkboxes-->
            <script>
                function ValidateCheckboxes() {
                    var inputElems = document.getElementsByTagName("input"),
                        checkBoxCount = 0;

                    for (var i = 0; i < inputElems.length; i++) {
                        if (inputElems[i].type == "checkbox" && inputElems[i].checked == true) {
                            checkBoxCount++;
                        }
                    }
                    if (checkBoxCount < @Model.AssignedEmployeeCompetenceDataList.Count()) {
                        alert("Looks like you forgot to fill out some parts of the form");
                        return false;
                    }
                }
            </script>

            <!-- Sumbit-->
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-success" />
            </div>
        </form>

    </div>
</div>
<div>
    <a asp-page="./Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}