@page
@model Teamber.Pages.Teams.CreateModel
@{
    ViewData["Title"] = "Create";
    if (String.IsNullOrEmpty(Model.Login) || String.IsNullOrEmpty(Model.Manager))
        Response.Redirect("/Login/Login");
}

<body class="fade-in">
    <div class="container removePad" style="padding-bottom: 1%">
        <div class="row row-cols-3 greenBG" style="margin-left: 1.2%;">
            <div class="col-1.5 padOne">
                <h2 class="padTwoTop">Create Team</h2>
            </div>
        </div>
    </div>

    <div class="container">
        <form method="post">
            <div class="row row-cols-2">
                <div class="col-4">
                    <div class="darkBG padThree">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <h4>Team Name</h4>
                        <div class="form-group">
                            <input asp-for="Team.Title" class="form-control" />
                            <span asp-validation-for="Team.Title" class="text-danger"></span>
                        </div>
                        <input type="hidden" asp-for="Team.Synergy" class="form-control" id="teamSynergy" />

                        <hr>
                        <div>
                            <h4>Questionnaires</h4>

                            @{

                                foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                {
                                    if (true)
                                    {
                                        @:
                                    }
                                    @:
                                    <button type="button" onclick="showHideRelatedCompetences(this.id)"
                                            id="@questionnaire.QuestionnaireID-questionnaireButton" class="questionnaireButton">
                                        @questionnaire.Title
                                    </button>

                                    @:
                                }
                                @:
                            }
                        </div>
                        <div class="form-group" style="display: none">
                            <div class="table">
                                <table>
                                    <tr>
                                        Questionnaires
                                    </tr>
                                    <tr>
                                        @{
                                            int cnt2 = 0;

                                            foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                            {
                                                if (cnt2++ % 3 == 0)
                                                {
                                                @:</tr><tr>
                                                }
                                                @:<td>
                                                    <input type="checkbox"
                                                           name="selectedQuestionnaires"
                                                           onclick="showHideRelatedCompetences(this.id)"
                                                           id="@questionnaire.QuestionnaireID-questionnaire"
                                                           value="@questionnaire.QuestionnaireID"
                                                           @(Html.Raw(questionnaire.Assigned ? "checked=\"checked\"" : "")) />
                                                    @questionnaire.Title
                                                @:</td>
                                            }
                                        @:</tr>
                                        }
                                    </table>
                                </div>
                            </div>
                            <br />
                            <div class="form-group">
                                <div class="table" style="overflow: auto;">
                                    <table>
                                        <tr>
                                            <h4>Competences</h4>
                                        </tr>
                                        <tr>
                                            @{
                                                int cnt3 = 0;

                                                foreach (var competence in Model.AllCompetencesDataList)
                                                {
                                                    if (cnt3++ % 2 == 0)
                                                    {
                                                    @:</tr><tr>
                                                    }
                                                    @:<td class="@competence.QuestionnaireID-Qclass startHidden">
                                                        <input type="checkbox"
                                                               style="display: none;"
                                                               name="selectedCompetences"
                                                               id="@competence.QuestionnaireCompetenceID-competence"
                                                               value="@competence.QuestionnaireCompetenceID"
                                                               checked="checked" />
                                                        @competence.Criteria
                                                    @:</td>
                                                    @:<td class="@competence.QuestionnaireID-Qclass startHidden">
                                                        <input type="number" min="0" max="5"
                                                               name="selectedCompetencesValue"
                                                               onchange="calculateSynergies(this.id); calculateTeamSynergy(); checkOrUncheckQuestionnaire(this.id)"
                                                               id="@competence.QuestionnaireCompetenceID-competenceValue"
                                                               value="0"
                                                               @(Html.Raw(competence.Assigned ? "checked=\"checked\"" : "")) />
                                                    @:</td>
                                                }
                                            @:</tr>
                                            }
                                        </table>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <input type="submit" value="Create" class="btn btn-success" />
                                </div>
                            </div>
                        </div>
                        <div class="col-8">
                            <div class="row row-cols-2">
                                <div class="col" align="center">
                                    <h4>Competence synergy</h4>
                                    <div class="col-md-6">
                                        <div id="indicatorContainer">
                                        </div>
                                    </div>
                                </div>

                                <div class="col" align="center">
                                    <h4>Personality overview</h4>
                                    <!-- radar chart code start-->
                                    <!-- Import chart.js framework-->
                                    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

                                    <!-- Import icons-->
                                    <script src="https://kit.fontawesome.com/c869845de6.js" crossorigin="anonymous"></script>

                                    <!-- Stacked canvases provinding a customized radar chart.-->
                                    <div class="canvasWrapper" width="300" heigth="300">
                                        <canvas id="myCanvas" width="300" height="300"></canvas>
                                        <canvas id="myChart" width="300" height="300"></canvas>

                                        <p id="Analysts">
                                            Analysts
                                            <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                                               title="Intuitive (N) and Thinking (T) personality types, known for their rationality, impartiality and intellectual excellence">
                                            </i>
                                        </p>

                                        <p id="Diplomats">
                                            Diplomats
                                            <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                                               title="Intuitive (N) and Feeling (F) personality types, known for their empathy, diplomatic skills, and passionate idealism">
                                            </i>
                                        </p>

                                        <p id="Sentinels">
                                            Sentinels
                                            <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                                               title="Observant (S) and Judging (J) personality types, known for their practicality and focus on order, security, and stability">
                                            </i>
                                        </p>

                                        <p id="Explorers">
                                            Explorers
                                            <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                                               title="Observant (S) and Prespecting (P) persoanlity types, known for their spontaneity, ingenuity, and ability to live in the moments">
                                            </i>
                                        </p>
                                    </div>


                                    <!--Configuration of radar chart-->
                                    <script>
                                        function createRadar() {
                                            // initialize arrays to populate radarchart
                                            const personalityoptions = ["INTJ", "INTP", "ENTJ", "ENTP", "ISTP", "ISFP", "ESTP", "ESFP", "ISTJ", "ISFJ", "ESTJ", "ESFJ", "INFJ", "INFP", "ENFJ", "ENFP"];
                                            var personalityOccurence = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

                                            // get data from all checked employee checkboxes
                                            var checkedCheckBoxes = document.querySelectorAll('input[name=selectedEmployees]:checked');

                                            // for each personalitytype
                                            for (var i = 0; i < personalityoptions.length; i++) {

                                                // for earch checked employee
                                                for (var x = 0; x < checkedCheckBoxes.length; x++) {

                                                    // if checked employee box matches a personality from list, add +1 in occurence array
                                                    if (personalityoptions[i] == checkedCheckBoxes[x].attributes[5].nodeValue) {
                                                        personalityOccurence[i] += 1;
                                                    }
                                                }
                                            }

                                            Chart.defaults.global.legend.display = false;
                                            var ctx = document.getElementById("myChart").getContext("2d");
                                            var myRadarChart = new Chart(ctx, {
                                                type: 'radar',
                                                options: {
                                                    startAngle: 12,
                                                    scale: {
                                                        ticks: {
                                                            display: false,
                                                        }
                                                    }
                                                },
                                                data: {
                                                    labels: personalityoptions,
                                                    datasets: [{
                                                        data: personalityOccurence,
                                                        backgroundColor: "rgba(40, 167, 69, 0.2)",
                                                        borderColor: "rgba(40, 167, 69, 1)",
                                                        responsive: true
                                                    }],
                                                }
                                            });

                                            // Stacked canvas to provide an axis to categorize personality types.
                                            var c = document.getElementById("myCanvas");
                                            var ctx = c.getContext("2d");
                                            ctx.setLineDash([5]);
                                            // X-axis
                                            ctx.moveTo(0, 150);
                                            ctx.lineTo(300, 150);
                                            ctx.stroke();
                                            // Y-axis
                                            ctx.moveTo(150, 0);
                                            ctx.lineTo(150, 300);
                                            ctx.stroke();
                                        }
                                        window.onload = createRadar;
                                    </script>

                                    <style>
                                        .canvasWrapper {
                                            position: relative;
                                            width: 300px;
                                            height: 300px;
                                        }

                                            .canvasWrapper canvas {
                                                position: absolute;
                                                text-align: center;
                                                align-items: center;
                                                align-content: center;
                                                top: 0;
                                                left: 0;
                                            }

                                        #Analysts {
                                            position: absolute;
                                            top: 0;
                                            right: 0;
                                        }

                                        #Diplomats {
                                            position: absolute;
                                            top: 0;
                                            left: 0;
                                        }

                                        #Sentinels {
                                            position: absolute;
                                            bottom: 0;
                                            left: 0;
                                        }

                                        #Explorers {
                                            position: absolute;
                                            bottom: 0;
                                            right: 0;
                                        }

                                        .fa-question-circle:hover {
                                            color: lightgrey;
                                        }

                                        #indicatorContainer canvas {
                                            margin-top: 44px;
                                            margin-left: -27px;
                                        }
                                    </style>
                                    <!-- radar chart code end-->

                                </div>
                            </div>

                            <br>
                            <div class="row">
                                <h4>Team overview</h4>
                                <table class="table table-striped">
                                    <tr>
                                        <td>
                                            <span id="teamMembers"></span>
                                        </td>
                                    </tr>
                                </table>

                            </div>
                            <br />


                            <div class="row">
                                <h4>Suggested team members</h4>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">Name</th>
                                            <th scope="col">Synergy-Score</th>
                                            <th scope="col">Job title</th>
                                            <th scope="col"></th>
                                        </tr>
                                    </thead>
                                    <tbody id="employeeList">
                                        <div class="row">
                                            @{
                                                int cnt = 0;

                                                foreach (var employee in Model.AssignedEmployeeDataList)
                                                {
                                                    if (cnt++ % 3 == 0)
                                                    {
                                                        @:
                                                    }
                                                    @:<div class="col-md-4">
 <!-- måske tilføj en class her?-->
                                                        <p>
                                                <tr id="@employee.EmployeeID-outerDiv">
                                                    <td><span id="@employee.EmployeeID-name">@employee.FullName</span></td>
                                                    <td><span id="@employee.EmployeeID">0</span> %</td>
                                                    <td><span>@employee.JobTitle</span></td>
                                                    <td>
                                                        <input type="checkbox"
                                                               onchange="calculateTeamSynergy(); createRadar(); addToMemberList(this.id);"
                                                               name="selectedEmployees"
                                                               id="@employee.EmployeeID-employee"
                                                               value="@employee.EmployeeID"
                                                               @(Html.Raw(employee.Assigned ? "checked=\"checked\"" : ""))
                                                               class="@(Html.Raw(employee.PersonalityType))" style="transform: scale(2);" />
                                                    </td>
                                                </tr>
                                                </p>
                                                @:


                                            }
                                            @:
                                            }

                                </div>
                                </tbody>
                                </table>
                            </div>
                    </form>
                </div>
                </div>

                </div>
                <br>
                </div>
                <br><br>
                </div>
                </div>
                </div>

                <footer id="sticky-footer" class="py-4 bg-dark text-white-50 fixed-bottom">
                    <div class="container text-center">
                        <small>Copyright &copy; Teamber 2020</small>
                    </div>
                </footer>
            </body>
            <style>
                .startHidden {
                    display: none;
                }
            </style>
            @section Scripts {
                @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
            }



            <script type="text/javascript" src="../js/radialIndicator.js"></script>
            <script type="text/javascript">

    
                var activeQuestionnaireButton = "";
                                //Sets activeQuestionnaireButton to the first questionnaire to avoid errors
                                try {
                                    var buttons = document.getElementsByClassName("questionnaireButton");
                                    var first = buttons[0].id;
                                    console.log("first er " + first);
                                    activeQuestionnaireButton = first;
                                    console.log("active er " + activeQuestionnaireButton);
                                }
                                catch (err) {
                                }




function addToMemberList(employee) {
    var employeeID = employee.split("-")[0];
    var elementExists = document.getElementById("" + employeeID + "-teamMember"); //Is he already a member? true/false

    if (elementExists == null) {
        var name = document.getElementById("" + employeeID + "-name").innerHTML;
        var synergy = document.getElementById(employeeID).innerHTML;

        //creating the li so we can add the employee to the team member list
        var node = document.createElement("li");
        node.setAttribute("id", "" + employeeID + "-teamMember");

        var spanSynergy = document.createElement("span");
        node.setAttribute("id", "" + employeeID + "-teamMember");

        var activeQuestionnaire = document.getElementById(activeQuestionnaireButton).innerText;

        //Creates the text that is seen on the member list
        //The span have specific id's so that the data can be gathered again.
        node.innerHTML="" + name + " - <span id='" + employeeID + "-memberQuestionnaire'>" + activeQuestionnaire + "</span>" + " - <span id='" + employeeID + "-memberSynergy'>" + synergy + "</span> %";
        document.getElementById("teamMembers").appendChild(node);

        //Lastly we change the employees id, so that it includes the id for the questionnaire he was associated with in the team. fx 1
        var activeQuestionnaireID = activeQuestionnaireButton.split("-")[0];
        document.getElementById("" + employeeID + "-employee").value = "" + employeeID + "-" + activeQuestionnaireID;
    }
    else {//if he is already in the team, we want him removed
        var item = document.getElementById("" + employeeID + "-teamMember");
        item.parentNode.removeChild(item);
    }
                }


                function updateMemberSynergy(employeeID) {
                    var elementExists = document.getElementById("" + employeeID + "-teamMember"); //is he a member of the team?
                    if (elementExists != null) { //is he is a member then update his synergy
                        var synergy = document.getElementById(employeeID).innerHTML;
                        document.getElementById("" + employeeID + "-memberSynergy").innerHTML = synergy;
                    }
                }

                //Used to check which questionnaires that are associated with the team.
                //fx if a questionnaire called "front end" tests for c# competences, and the team have edited the c# competences to above zero
                //then the team is associated with the questionnaire "front end".
                function checkOrUncheckQuestionnaire(competence) {
                    var competenceID = competence.split("-")[0];
                    var chosen = false;
                    var questionnaireNumber = 0; //contains the index of the current questionnaire in the questionnaireCriterias dictionary
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) {
                            questionnaireNumber = i;
                        }
                    }
                    
                    //is any of the associated criterias above zero? if so, then the questionnaire should be checked.
                    for (var k in QuestionnaireCriterias[questionnaireNumber]) {
                        if (QuestionnaireCriterias[questionnaireNumber][k] > 0) {
                            chosen = true;
                        }
                    }

                    document.getElementById("" + questionnaireNumber + "-questionnaire").checked = chosen;
                }



    //Intialiazation of the synergy score indicator.
var radialObj = radialIndicator('#indicatorContainer', {
    barColor: {
        0: '#a1ffa7',
        //33: '#FFFF00',
        //66: '#0066FF',
        100: '#00660e'
    },
    barWidth: 15,
    radius: 90,
    percentage: true,
    frameTime: 7,
    initValue : 0
});



    //These are dictionaries containing dictionaries. Based on id's. So fx employe1 {competence1: answer1}

    //Not updated live. Static data from c¤
    @Model.AllEmpCompetencesString

    //Not updated live. Static data from c#
    @Model.AllEmpQuestionnairesString

    //updated live. Based on user input in the criterias.
    @Model.AllQuestionnairesString



    //Just an array containing the questionnaireIDs
    @Model.AllQuestionnaireTitlesString


                //Highly inpirated from https://stackoverflow.com/questions/5066925/javascript-only-sort-a-bunch-of-divs
                function sortEmployeesBySynergy() { //sorts the table of employees by synergy score.
                    var toSort = document.getElementById('employeeList').children;
                    toSort = Array.prototype.slice.call(toSort, 0);

                    toSort.sort(function(a, b) {
                        var empID = a.id.split("-")[0];
                        var aord = +document.getElementById(empID).innerText;

                        var empID2 = b.id.split("-")[0];
                        var bord = +document.getElementById(empID2).innerText;

                        // two elements never have the same ID hence this is sufficient:
                        return (aord <= bord) ? 1 : -1;
                    });

                    var parent = document.getElementById('employeeList');
                    parent.innerHTML = "";

                    for(var i = 0, l = toSort.length; i < l; i++) {
                        parent.appendChild(toSort[i]);
                    }
                }







    //Just calculates the average synergy for the team members. 
    function calculateTeamSynergy() {
        var employeeSynergies = selectedEmployees();

        var totalScores = 0;
        for (var employeeSynergy in employeeSynergies) {
            totalScores += parseInt(employeeSynergies[employeeSynergy]);
        }
        var average = totalScores / employeeSynergies.length;
        var synergy = Math.round(average);

        if (employeeSynergies.length != 0) {
            document.getElementById("teamSynergy").value = synergy;
            radialObj.animate(synergy);
        }
        else {
            document.getElementById("teamSynergy").value = 0;
        radialObj.animate(0);
        }

    }



    //WHen you click on a questionnaire, the associated competences should be displayed and the rest should be hidden.
    //function runs when a questionnaire button is clicked.
    function showHideRelatedCompetences(questionnaire) {
        var questionnaireSplit = questionnaire.split("-");
        var questionnaireID = questionnaireSplit[0];

        //updates the global variable. So the activeQuestionnaireButton is changed to the one that was clicked.
        activeQuestionnaireButton = "" + questionnaireID + "-questionnaireButton";
        hideAllCompetences();
        document.getElementById(questionnaire).style.backgroundColor = 'lightblue';
        var competences = document.getElementsByClassName("" + questionnaireID + "-Qclass");//the associated criterias have this class name.
        for (var i in competences) {
            var checkStatus = true;
            
            if (checkStatus) {
                try {
                    competences[i].style.display = 'table-cell';
                }
                catch (err) {

                }

            }
            else {
                try {
                    competences[i].style.display = 'none';
                }
                catch (err) {

                }

            }

        }

        //Employee synergies should be resat to 0, because the questionnaire that the synergy is based on is changed.
        var exampleCompetence = 0;
        for (var i in QuestionnaireCriterias[questionnaireID]) {
            exampleCompetence = i;
        }

        var exampleCompetenceString = "" + exampleCompetence + "-competenceValue";
        calculateSynergies(exampleCompetenceString); //and the the new synergies is calculated
   }

                function hideAllCompetences() {
                    var competences = document.getElementsByClassName("startHidden"); //all competences have this class.

                    for (var i = 0; i < competences.length; i++) {
                        competences[i].style.display = 'none';
                    }

                    var questionnaireButtons = document.getElementsByClassName("questionnaireButton");

                    for (var i = 0; i < questionnaireButtons.length; i++) {
                        questionnaireButtons[i].style.backgroundColor = 'white';
                    }
                }


    //gets all of the team members.
    function selectedEmployees() {
        var checkedEmployees = [];
        for (var employee in EmpQuestionnaires){ //loops through all employeeIDs
            if (EmpQuestionnaires.hasOwnProperty(employee)) {
                var temp = document.getElementById("" + employee + "-employee").checked; //is the employee a member of the team?
                if (temp) {
                    var employeeSynergy = document.getElementById(employee).innerHTML;
                    checkedEmployees.push(employeeSynergy); //added to the array
                        }
                    }
        }
        return checkedEmployees;
    }






    //Gets the questionnaires that are associated with the team. - those questionnaires with criterias above zero.
    function selectedQuestionnaires() {
        var checkedQuestionnaires = [];
        for (var questionnaire in QuestionnaireTitles){ //loops through all questionnaires
            if (QuestionnaireTitles.hasOwnProperty(questionnaire)) {
                var temp = document.getElementById("" + QuestionnaireTitles[questionnaire] + "-questionnaire").checked;
                if (temp) {
                    checkedQuestionnaires.push(QuestionnaireTitles[questionnaire]);

                        }
                    }
        }
        return checkedQuestionnaires;
    }


                //Runs when a criteria is changed.
                //Calculate all synergies for the employee based on the criterias belonging questionnaire
                function calculateSynergies(competence) {
                    var competenceID = competence.split("-")[0];
                    var questionnaireNumber = 0; //the key of the questionnaire in the questionnaireCriterias dictionary
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) { //if the questionnaire have this competence.
                            questionnaireNumber = i;                            //then we know that this is the belonging questionnaire
                        }

                    }

                    questionnaireID = parseInt(questionnaireNumber);
                    updateQuestionnaireCriterias(); //updates a dictionary containing team criterias.
                    var maxScore = calculateMaxScore(questionnaireID);

                for (var employee in EmpQuestionnaires) { //dictionary containing all the employees associated questionnaires.
                    if (EmpQuestionnaires.hasOwnProperty(employee)) {
                        var employeeID = parseInt(employee);

                        if (EmpQuestionnaires[employee].includes(questionnaireID)) { //if the employee is associatd with the questionnaire

                            calculateEmployeeSynergy(employeeID, questionnaireID, maxScore); //calculate his synergy
                            updateMemberSynergy(employeeID); //updates the member list synergy, if he is in the team.
                        }
                        else if (document.getElementById("" + employee + "-teamMember") == null) {
                            //if the employee dont belong to the questionnaire, then the synergy should be zero. 
                             document.getElementById("" + employee).innerHTML = 0;

                        }
                        else {
                            //alert("han er ikke med i spørgeskemaet, men han er med i teamet.");
                            //dont do anything
                        }
                    }
                    }
                    sortEmployeesBySynergy(); //and lastly sort the employees by synergy score.
}

                

    //Updates a dictionary containing dictionaries of criterias.
    function updateQuestionnaireCriterias() {
        var target = QuestionnaireCriterias;
	    for (var questionnaire in target){ //loops through all questionnaires
        if (target.hasOwnProperty(questionnaire)) {
                var target2 = QuestionnaireCriterias[questionnaire];
	             for (var competence in target2){ //loops through all criterias for this questionnaire.
                    if (target2.hasOwnProperty(competence)) {
                        var temp = document.getElementById("" + competence + "-competenceValue").value;
                        QuestionnaireCriterias[questionnaire][competence] = temp;
                    }
                 }
            }
        }
    }


    //the algorithm that calculates the employee synergy.
    function calculateEmployeeSynergy(employee, questionnaire, max_score) {

        //the first part here checks if the employee is associated with the questionnaire.
        var memberInChosenQuestionnaire = false;

        try {
            var memberQuestionnaireTitle = document.getElementById("" + employee + "-memberQuestionnaire").innerText;
            var currentQuestionnaire = document.getElementById(activeQuestionnaireButton).innerText;

            if (memberQuestionnaireTitle == currentQuestionnaire) {
                memberInChosenQuestionnaire = true;
            }
        }
        catch (err) {

        }


        //if the employee is not a member of the team or is associated with the questionnaire. Then the synergy should be calculated again.
        //this basically just means that members who are not associated with the questionnaire, should keep their synergy score.
        if (document.getElementById("" + employee + "-teamMember") == null || memberInChosenQuestionnaire) {
            var totalScore = 0;
            var target = QuestionnaireCriterias[questionnaire];
            for (var competence in target) { //loops thorugh all of the questionnaire's competences
                if (target.hasOwnProperty(competence)) {
                    var competenceInt = parseInt(competence);
                    var temp = EmpCompetences[employee][competenceInt]; //What is this employees score for this competence?


                    var tempInt = parseInt(temp);
                    if (tempInt > target[competenceInt]) { //the selected criteria value is the max score for this criteria.
                        tempInt = parseInt(target[competenceInt]);
                    }
                    totalScore += tempInt;

                }
            }
            
            //calculates the synergy
            var tempSynergy = totalScore / max_score * 100;
            var synergy = Math.round(tempSynergy);

            if (Number.isInteger(synergy)) { 
                document.getElementById("" + employee).innerHTML = synergy;
            }
            else {//if max_score is zero we get a divide-by-zero error which results in Not-A-Number. If so, we set the score to zero.
                document.getElementById("" + employee).innerHTML = 0;
            }
        }
        else if (memberInChosenQuestionnaire == false) {

        }


}




function calculateMaxScore(questionnaire) {
	var maxScore = 0;
	var target = QuestionnaireCriterias[questionnaire];

	for (var competence in target){
    if (target.hasOwnProperty(competence)) {

        var temp = target[competence];
         maxScore += parseInt(temp);
    }
}
return maxScore;
}



            //At the start the variable activeQuestionnaireButton is set to the first questionnaire to avoid some errors.
                try {
                    activeQuestionnaireButton = "" + QuestionnaireTitles[0] + "-questionnaireButton";
                }
                catch (err) {
                    console.log("no questionnaires in the database.");
                }
            </script>
