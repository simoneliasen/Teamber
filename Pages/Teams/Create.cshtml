@page
@model ContosoUniversity.Pages.Teams.CreateModel
@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Team</h4>
<hr />
<form method="post">
    <div class="row">
        <div class="col-md-4" style="background-color: lightgray;">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Team.Title" class="control-label"></label>
                <input asp-for="Team.Title" class="form-control" />
                <span asp-validation-for="Team.Title" class="text-danger"></span>
            </div>
            <input type="hidden" asp-for="Team.Synergy" class="form-control" id="teamSynergy" />
            <!--
            <div class="form-group">
                <label asp-for="Team.Synergy" class="control-label"></label>
                <input asp-for="Team.Synergy" class="form-control" id="teamSynergy" />
                <span asp-validation-for="Team.Synergy" class="text-danger"></span>
            </div>-->
            <div>
                <p>Questionnaires</p>

                @{
                    
                    foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                    {
                        if (true)
                        {
                            @:
                            }
                            @:
                <button type="button" onclick="showHideRelatedCompetences(this.id)"
                        id="@questionnaire.QuestionnaireID-questionnaireButton" class="questionnaireButton">
                    @questionnaire.Title
                    </button>
                                
                            @:
                        }
                    @:
                }
            </div>
            <div class="form-group">
                <div class="table">
                    <table>
                        <tr>
                            Questionnaires
                        </tr>
                        <tr>
                            @{
                                int cnt2 = 0;

                                foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                {
                                    if (cnt2++ % 3 == 0)
                                    {
                                    @:</tr><tr>
                                    }
                                    @:<td>
                                        <input type="checkbox"
                                               name="selectedQuestionnaires"
                                               onclick="showHideRelatedCompetences(this.id)"
                                               id="@questionnaire.QuestionnaireID-questionnaire"
                                               value="@questionnaire.QuestionnaireID"
                                               @(Html.Raw(questionnaire.Assigned ? "checked=\"checked\"" : "")) />
                                        @questionnaire.Title
                                    @:</td>
                                }
                            @:</tr>
                            }
                        </table>
                    </div>
                </div>
                <div class="form-group">
                    <div class="table">
                        <table>
                            <tr>
                                Competences
                            </tr>
                            <tr>
                                @{
                                    int cnt3 = 0;

                                    foreach (var competence in Model.AllCompetencesDataList)
                                    {
                                        if (cnt3++ % 3 == 0)
                                        {
                                        @:</tr><tr>
                                        }
                                        @:<td class="@competence.QuestionnaireID-Qclass startHidden">
                                            <input type="checkbox"
                                                   style="display: none;"
                                                   name="selectedCompetences"
                                                   id="@competence.QuestionnaireCompetenceID-competence"
                                                   value="@competence.QuestionnaireCompetenceID"
                                                   checked="checked" />
                                            @competence.Criteria
                                        @:</td>
                                        @:<td class="@competence.QuestionnaireID-Qclass startHidden">
                                            <input type="number" min="0" max="5"
                                                   name="selectedCompetencesValue"
                                                   onchange="calculateSynergies(this.id); calculateTeamSynergy(); checkOrUncheckQuestionnaire(this.id)"
                                                   id="@competence.QuestionnaireCompetenceID-competenceValue"
                                                   value="0"
                                                   @(Html.Raw(competence.Assigned ? "checked=\"checked\"" : "")) />
                                        @:</td>
                                    }
                                @:</tr>
                                }
                            </table>
                        </div>
                    </div>
                    <div class="form-group">
                        <input type="submit" value="Create" class="btn btn-primary" />
                    </div>

                </div>

                <div class="col-md-8">
                    <div id="indicatorContainer">

                    </div>

                    <div>
                        Team members
                        <ul id="teamMembers">
                        </ul>
                    </div>
                    <div class="form-group">
                        <div class="table">
                            <table>
                                <tr>
                                    Employees
                                </tr>
                                <tr>
                                    @{
                                        int cnt = 0;

                                        foreach (var employee in Model.AssignedEmployeeDataList)
                                        {
                                            if (cnt++ % 3 == 0)
                                            {
                                            @:</tr><tr>
                                            }
                                            @:<td>
                                                <input type="checkbox"
                                                       onchange="calculateTeamSynergy(); addToMemberList(this.id);"
                                                       name="selectedEmployees"
                                                       id="@employee.EmployeeID-employee"
                                                       value="@employee.EmployeeID"
                                                       @(Html.Raw(employee.Assigned ? "checked=\"checked\"" : "")) />
                                                <p><span id="@employee.EmployeeID-name">@employee.FullName</span><br />
                                                                                                                 <span>@employee.JobTitle</span><br />

                                <span id="@employee.EmployeeID">0</span> %</p>
                                            @:</td>
                                        }
                                    @:</tr>
                                    }
                                </table>
                            </div>
                        </div>








                    </div>

                </div>
            </form>
            <style>
                .startHidden {
                    display: none;
                }

            </style>

            <div>
                <a asp-page="Index">Back to List</a>
            </div>
            @section Scripts {
                @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script type="text/javascript" src="../js/radialIndicator.js"></script>
<script type="text/javascript">

    var activeQuestionnaireButton = "";



function addToMemberList(employee) {
    var employeeID = employee.split("-")[0];
    var elementExists = document.getElementById("" + employeeID + "-teamMember");

    if (elementExists == null) {
        var name = document.getElementById("" + employeeID + "-name").innerHTML;
        var synergy = document.getElementById(employeeID).innerHTML;


        var node = document.createElement("li");
        node.setAttribute("id", "" + employeeID + "-teamMember");

        var spanSynergy = document.createElement("span");
        node.setAttribute("id", "" + employeeID + "-teamMember");

        var activeQuestionnaire = document.getElementById(activeQuestionnaireButton).innerText;

        //obs bruger ikke employeeid + memberquestionnaire samlet id'et til noget endnu. så kan være at det skal indeholde noget andet.
        node.innerHTML="" + name + " - <span id='" + employeeID + "-memberQuestionnaire'>" + activeQuestionnaire + "</span>" + " - <span id='" + employeeID + "-memberSynergy'>" + synergy + "</span> %";
        document.getElementById("teamMembers").appendChild(node);
    }
    else {
        var item = document.getElementById("" + employeeID + "-teamMember");
        item.parentNode.removeChild(item);
    }
                }


                function updateMemberSynergy(employeeID) {
                    var elementExists = document.getElementById("" + employeeID + "-teamMember");
                    if (elementExists != null) {
                        var synergy = document.getElementById(employeeID).innerHTML;
                        document.getElementById("" + employeeID + "-memberSynergy").innerHTML = synergy;
                    }
                }


                function checkOrUncheckQuestionnaire(competence) {
                    var competenceID = competence.split("-")[0];
                    var chosen = false;
                    var questionnaireNumber = 0;
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) {
                            questionnaireNumber = i;
                        }

                    }

                    for (var k in QuestionnaireCriterias[questionnaireNumber]) {
                        if (QuestionnaireCriterias[questionnaireNumber][k] > 0) {
                            chosen = true;
                        }
                    }

                    document.getElementById("" + questionnaireNumber + "-questionnaire").checked = chosen;
                }



    //Intialiazation
var radialObj = radialIndicator('#indicatorContainer', {
    barColor: {
        0: '#a1ffa7',
        //33: '#FFFF00',
        //66: '#0066FF',
        100: '#00660e'
    },
    barWidth: 15,
    percentage: true,
    frameTime: 7,
    initValue : 0
});





    //opdateres ikke.
    @Model.AllEmpCompetencesString

    //opdateres ikke.
    @Model.AllEmpQuestionnairesString

   //opdateres live. Ud fra user input i kriterierne.
    @Model.AllQuestionnairesString



    //bare et array over alle questionnaires:
    @Model.AllQuestionnaireTitlesString


    /*
var QuestionnaireCriterias = {
	1:{
		1: 5,
		2: 3,
		3: 1
	},
	2:{
		4: 5, //Næste step: få den her data til at opdatere automatisk ud fra hvad brugeren vælger af kriterier. Derefter loop over alle employees. Izzy.
		5: 5,
		6: 4
	}
}
*/
    //hent dem ind ligesom ved de andre, for det eneste der skal ændres er jo priorityen.
    //når man skal opdatere: get quistionnaireid, get questionnaireComepetenceID. og så sig QuestionnaireCriterias[questionnaireID][questionnaireCompetenceID] = valuen.




//document.getElementById("teamSynergy").innerHTML = EmpQuestionnaires[11][1];

    //find de questionnaires der er vinget af og foreach kør nedenstående

    function calculateTeamSynergy() {
        var employeeSynergies = selectedEmployees();

        var totalScores = 0;
        for (var employeeSynergy in employeeSynergies) {
            totalScores += parseInt(employeeSynergies[employeeSynergy]);
        }
        var average = totalScores / employeeSynergies.length;
        var synergy = Math.round(average);

        if (employeeSynergies.length != 0) {
            document.getElementById("teamSynergy").value = synergy;
            radialObj.animate(synergy);
        }
        else {
            document.getElementById("teamSynergy").value = 0;
        radialObj.animate(0);
        }
        
    }




    function showHideRelatedCompetences(questionnaire) {
        var questionnaireSplit = questionnaire.split("-");
        var questionnaireID = questionnaireSplit[0];

        //og opdaterer lige en global variabel
        activeQuestionnaireButton = "" + questionnaireID + "-questionnaireButton";
        hideAllCompetences();
        document.getElementById(questionnaire).style.backgroundColor = 'lightblue';
        var competences = document.getElementsByClassName("" + questionnaireID + "-Qclass");
        for (var i in competences) {
            var checkStatus = true;
                //document.getElementById(questionnaire).checked;
            if (checkStatus) {
                competences[i].style.display = 'table-cell';
            }
            else {
                competences[i].style.display = 'none';
            }

        }
   }

                function hideAllCompetences() {
                    var competences = document.getElementsByClassName("startHidden");

                    for (var i = 0; i < competences.length; i++) {
                        competences[i].style.display = 'none';
                    }

                    var questionnaireButtons = document.getElementsByClassName("questionnaireButton");

                    for (var i = 0; i < questionnaireButtons.length; i++) {
                        questionnaireButtons[i].style.backgroundColor = 'white';
                    }
                }



    function selectedEmployees() {
        var checkedEmployees = [];
        for (var employee in EmpQuestionnaires){
            if (EmpQuestionnaires.hasOwnProperty(employee)) {
                var temp = document.getElementById("" + employee + "-employee").checked;
                if (temp) {
                    var employeeSynergy = document.getElementById(employee).innerHTML;
                    //alert("employee er" + employee);
                    //alert("employee synergy er " + employeeSynergy);
                    checkedEmployees.push(employeeSynergy);

                        }
                    }
        }
        return checkedEmployees;
    }







    function selectedQuestionnaires() {
        var checkedQuestionnaires = [];
        for (var questionnaire in QuestionnaireTitles){
            if (QuestionnaireTitles.hasOwnProperty(questionnaire)) {
                var temp = document.getElementById("" + QuestionnaireTitles[questionnaire] + "-questionnaire").checked;
                if (temp) {
                    checkedQuestionnaires.push(QuestionnaireTitles[questionnaire]);

                        }
                    }
        }
        return checkedQuestionnaires;
    }



                function calculateSynergies(competence) {
                    var competenceID = competence.split("-")[0];
                    var questionnaireNumber = 0;
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) {
                            questionnaireNumber = i;
                        }

                    }

                    questionnaireID = parseInt(questionnaireNumber);

                   
                    updateQuestionnaireCriterias();
                    var maxScore = calculateMaxScore(questionnaireID);

                for (var employee in EmpQuestionnaires) {
                    if (EmpQuestionnaires.hasOwnProperty(employee)) {
                        if (EmpQuestionnaires[employee].includes(questionnaireID)) { //altså hvis employeen er tilknyttet det givne questionnaire
                            var employeeID = parseInt(employee);
                            calculateEmployeeSynergy(employeeID, questionnaireID, maxScore);
                            updateMemberSynergy(employeeID);
                            //alert("max score er igen: " + maxScore + " " + typeof maxScore);
                        }
                    }
                }
}

                /*function calculateSynergies() {
        var chosenQuestionnaires = selectedQuestionnaires();
        updateQuestionnaireCriterias();
        for (var questionnaire in chosenQuestionnaires){
            if (chosenQuestionnaires.hasOwnProperty(questionnaire)) {

                var questionnaireID = parseInt(chosenQuestionnaires[questionnaire]);
                var maxScore = calculateMaxScore(questionnaireID);

                for (var employee in EmpQuestionnaires) {
                    if (EmpQuestionnaires.hasOwnProperty(employee)) {
                        if (EmpQuestionnaires[employee].includes(questionnaireID)) { //altså hvis employeen er tilknyttet det givne questionnaire
                            var employeeID = parseInt(employee);
                            calculateEmployeeSynergy(employeeID, questionnaireID, maxScore);
                            updateMemberSynergy(employeeID);
                            //alert("max score er igen: " + maxScore + " " + typeof maxScore);
                        }

                    }
                }

            }
        }



    }*/


    function updateQuestionnaireCriterias() {
        var target = QuestionnaireCriterias;
	    for (var questionnaire in target){
        if (target.hasOwnProperty(questionnaire)) {
                var target2 = QuestionnaireCriterias[questionnaire];
	             for (var competence in target2){
                    if (target2.hasOwnProperty(competence)) {
                        var temp = document.getElementById("" + competence + "-competenceValue").value;
                        QuestionnaireCriterias[questionnaire][competence] = temp;
                    }
                 }
            }
        }
    }



    function calculateEmployeeSynergy(employee, questionnaire, max_score) {

        if (document.getElementById("" + employee + "-teamMember") != null) {

        }
	var totalScore = 0;
	var target = QuestionnaireCriterias[questionnaire];
	for (var competence in target){
        if (target.hasOwnProperty(competence)) {
            //alert("Key is " + competence + ", value is " + target[competence]);
            var competenceInt = parseInt(competence);
            var temp = EmpCompetences[employee][competenceInt];


            var tempInt = parseInt(temp);
            if(tempInt > target[competenceInt]) {
         	    tempInt = parseInt(target[competenceInt]);
            }
            totalScore += tempInt;

        }
    }
//return totalScore;
var tempSynergy = totalScore/max_score*100;
    var synergy = Math.round(tempSynergy);

    if (Number.isInteger(synergy)) {
        document.getElementById("" + employee).innerHTML = synergy;
    }
    else {
        document.getElementById("" + employee).innerHTML = 0;
    }

}




function calculateMaxScore(questionnaire) {
	var maxScore = 0;
	var target = QuestionnaireCriterias[questionnaire];

	for (var competence in target){
    if (target.hasOwnProperty(competence)) {

        var temp = target[competence];
         maxScore += parseInt(temp);
    }
}
return maxScore;
}




            </script>
