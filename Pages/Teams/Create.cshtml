@page
@model ContosoUniversity.Pages.Teams.CreateModel
@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Team</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="form-group">
                <label asp-for="Team.Title" class="control-label"></label>
                <input asp-for="Team.Title" class="form-control" />
                <span asp-validation-for="Team.Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Team.Synergy" class="control-label"></label>
                <input asp-for="Team.Synergy" class="form-control" id="teamSynergy" />
                <span asp-validation-for="Team.Synergy" class="text-danger"></span>
            </div>
            <div class="form-group">
                <div class="table">
                    <table>
                        <tr>
                            Members
                        </tr>
                        <tr>
                            @{
                                int cnt = 0;

                                foreach (var employee in Model.AssignedEmployeeDataList)
                                {
                                    if (cnt++ % 3 == 0)
                                    {
                                    @:</tr><tr>
                                    }
                                    @:<td>
                                        <input type="checkbox"
                                               name="selectedEmployees"
                                               value="@employee.EmployeeID"
                                               @(Html.Raw(employee.Assigned ? "checked=\"checked\"" : "")) />
                                        <p>@employee.FullName - <span id="@employee.EmployeeID">0</span> %</p>
                                    @:</td>
                                }
                            @:</tr>
                            }
                        </table>
                    </div>
                </div>
                <div class="form-group">
                    <div class="table">
                        <table>
                            <tr>
                                Questionnaires
                            </tr>
                            <tr>
                                @{
                                    int cnt2 = 0;

                                    foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                    {
                                        if (cnt2++ % 3 == 0)
                                        {
                                        @:</tr><tr>
                                        }
                                        @:<td>
                                            <input type="checkbox"
                                                   name="selectedQuestionnaires"
                                                   onclick="showHideRelatedCompetences(this.id)"
                                                   id="@questionnaire.QuestionnaireID-questionnaire"
                                                   value="@questionnaire.QuestionnaireID"
                                                   @(Html.Raw(questionnaire.Assigned ? "checked=\"checked\"" : "")) />
                                            @questionnaire.Title 
                                        @:</td>
                                    }
                                @:</tr>
                                }
                            </table>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="table">
                            <table>
                                <tr>
                                    Competences
                                </tr>
                                <tr>
                                    @{
                                        int cnt3 = 0;

                                        foreach (var competence in Model.AllCompetencesDataList)
                                        {
                                            if (cnt3++ % 3 == 0)
                                            {
                                            @:</tr><tr>
                                            }
                                            @:<td class="@competence.QuestionnaireID-Qclass startHidden">
                                                <input type="checkbox"
                                                       name="selectedCompetences"
                                                       id="@competence.QuestionnaireCompetenceID-competence"
                                                       value="@competence.QuestionnaireCompetenceID"
                                                       checked="checked"/>
                                                @competence.Criteria
                                            @:</td>
                                            @:<td class="@competence.QuestionnaireID-Qclass startHidden">
                                                <input type="number" min="0" max="5" 
                                                       name="selectedCompetencesValue"
                                                       id="@competence.QuestionnaireCompetenceID-competenceValue"
                                                       value="0"
                                                       @(Html.Raw(competence.Assigned ? "checked=\"checked\"" : "")) />
                                            @:</td>
                                        }
                                    @:</tr>
                                    }
                                </table>
                            </div>
                        </div>
                        <div class="form-group">
                            <input type="submit" value="Create" class="btn btn-primary" />
                        </div>
                    </form>
    </div>
</div>
<button onclick="calculateSynergies()">Calculate synergies</button>

<style>
    .startHidden {
        display: none;
    }
</style>

<div>
    <a asp-page="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
<script type="text/javascript">

    //opdateres ikke.
    @Model.AllEmpCompetencesString

    //opdateres ikke.
    @Model.AllEmpQuestionnairesString

   //opdateres live. Ud fra user input i kriterierne.
    @Model.AllQuestionnairesString



    //bare et array over alle questionnaires:
    @Model.AllQuestionnaireTitlesString


    /*
var QuestionnaireCriterias = {
	1:{
		1: 5,
		2: 3,
		3: 1
	},
	2:{
		4: 5, //Næste step: få den her data til at opdatere automatisk ud fra hvad brugeren vælger af kriterier. Derefter loop over alle employees. Izzy.
		5: 5,
		6: 4
	}
}
*/
    //hent dem ind ligesom ved de andre, for det eneste der skal ændres er jo priorityen. 
    //når man skal opdatere: get quistionnaireid, get questionnaireComepetenceID. og så sig QuestionnaireCriterias[questionnaireID][questionnaireCompetenceID] = valuen.




//document.getElementById("teamSynergy").innerHTML = EmpQuestionnaires[11][1];

    //find de questionnaires der er vinget af og foreach kør nedenstående

    function showHideRelatedCompetences(questionnaire) {
        var questionnaireSplit = questionnaire.split("-");
        var questionnaireID = questionnaireSplit[0];
        var competences = document.getElementsByClassName("" + questionnaireID + "-Qclass");
        for (var i in competences) {
            var checkStatus = document.getElementById(questionnaire).checked;
            if (checkStatus) {
                competences[i].style.display = 'table-cell';
            }
            else {
                competences[i].style.display = 'none';
            }
            
        }
}




    function selectedQuestionnaires() {
        var checkedQuestionnaires = [];
        for (var questionnaire in QuestionnaireTitles){
            if (QuestionnaireTitles.hasOwnProperty(questionnaire)) {
                var temp = document.getElementById("" + QuestionnaireTitles[questionnaire] + "-questionnaire").checked;
                if (temp) {
                    checkedQuestionnaires.push(QuestionnaireTitles[questionnaire]);

                        }
                    }
        }
        return checkedQuestionnaires;
    }



    function calculateSynergies() {
        var chosenQuestionnaires = selectedQuestionnaires();
        updateQuestionnaireCriterias();
        for (var questionnaire in chosenQuestionnaires){
            if (chosenQuestionnaires.hasOwnProperty(questionnaire)) {

                var questionnaireID = parseInt(chosenQuestionnaires[questionnaire]);
                var maxScore = calculateMaxScore(questionnaireID);

                for (var employee in EmpQuestionnaires) {
                    if (EmpQuestionnaires.hasOwnProperty(employee)) {
                        if (EmpQuestionnaires[employee].includes(questionnaireID)) { //altså hvis employeen er tilknyttet det givne questionnaire
                            var employeeID = parseInt(employee);
                            calculateEmployeeSynergy(employeeID, questionnaireID, maxScore);
                            //alert("max score er igen: " + maxScore + " " + typeof maxScore);
                        }
                        
                    }
                }

            }   
        }


        
    }


    function updateQuestionnaireCriterias() {
        var target = QuestionnaireCriterias;
	    for (var questionnaire in target){
        if (target.hasOwnProperty(questionnaire)) {
                var target2 = QuestionnaireCriterias[questionnaire];
	             for (var competence in target2){
                    if (target2.hasOwnProperty(competence)) {
                        var temp = document.getElementById("" + competence + "-competenceValue").value;
                        QuestionnaireCriterias[questionnaire][competence] = temp;
                    }
                 }
            }
        }
    }



function calculateEmployeeSynergy(employee, questionnaire, max_score) {
	var totalScore = 0;
	var target = QuestionnaireCriterias[questionnaire];
	for (var competence in target){
        if (target.hasOwnProperty(competence)) {
            //alert("Key is " + competence + ", value is " + target[competence]);
            var competenceInt = parseInt(competence);
            var temp = EmpCompetences[employee][competenceInt];

            
            var tempInt = parseInt(temp);
            if(tempInt > target[competenceInt]) {
         	    tempInt = parseInt(target[competenceInt]);
            }
            totalScore += tempInt;
            
        }
    }
//return totalScore;
var tempSynergy = totalScore/max_score*100;
var synergy = Math.round(tempSynergy);
document.getElementById("" + employee).innerHTML = synergy;
}




function calculateMaxScore(questionnaire) {
	var maxScore = 0;
	var target = QuestionnaireCriterias[questionnaire];

	for (var competence in target){
    if (target.hasOwnProperty(competence)) {

        var temp = target[competence];
         maxScore += parseInt(temp);
    }
}
return maxScore;
}




</script>
