@page
@model ContosoUniversity.Pages.Teams.DetailsModel

@{
    ViewData["Title"] = "Details";
   if (String.IsNullOrEmpty(Model.Login) || String.IsNullOrEmpty(Model.Manager))
                Response.Redirect("/Login/Login");
}

<h1>Details</h1>

<div>
    <h4>Team</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Team.Title)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Team.Title)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Team.Synergy)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Team.Synergy)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Team.EmpTeams)
        </dt>
        <dd class="col-sm-10">
            <table class="table">
                <tr>
                    <th>Team members</th>
                </tr>
                @foreach (var item in Model.Team.EmpTeams)
                {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Employee.FullName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Employee.JobTitle)
                    </td>
                </tr>
                }
            </table>
        </dd>
        <dt class="col-sm-2">
        </dt>
        <dd class="col-sm-10">
            <table class="table">
                <tr>
                    <th>Questionnaire Title</th>
                </tr>
                @foreach (var item in Model.Team.TeamQuestionnaires)
                {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Questionnaire.Title)
                    </td>
                </tr>
                }
            </table>
        </dd>

        <dt class="col-sm-2">
        </dt>
        <dd class="col-sm-10">
            <table class="table">
                <tr>
                    <th>Team Criterias</th>
                    <th>Criteria Priority</th>
                </tr>
                @foreach (var criteria in Model.AssignedTeamCriteriaDataList)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => criteria.Criteria)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => criteria.Priority)
                        </td>
                    </tr>
                }
            </table>


            <!-- Import chart.js framework-->
            <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>

            <!-- Import icons-->
            <script src="https://kit.fontawesome.com/c869845de6.js" crossorigin="anonymous"></script>

            <!-- Stacked canvases provinding a customized radar chart.-->
            <div class="canvasWrapper" width="400" heigth="400">
                <canvas id="myCanvas" width="400" height="400"></canvas>
                <canvas id="myChart" width="400" height="400"></canvas>

                <p id="Analysts">
                    Analysts
                    <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                       title="Intuitive (N) and Thinking (T) personality types, known for their rationality, impartiality and intellectual excellence">
                    </i>
                </p>

                <p id="Diplomats">
                    Diplomats
                    <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                       title="Intuitive (N) and Feeling (F) personality types, known for their empathy, diplomatic skills, and passionate idealism">
                    </i>
                </p>

                <p id="Sentinels">
                    Sentinels
                    <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                       title="Observant (S) and Judging (J) personality types, known for their practicality and focus on order, security, and stability">
                    </i>
                </p>

                <p id="Explorers">
                    Explorers
                    <i class="far fa-question-circle" type="button" data-toggle="tooltip" data-placement="top"
                       title="Observant (S) and Prespecting (P) persoanlity types, known for their spontaneity, ingenuity, and ability to live in the moments">
                    </i>
                </p>
            </div>
        </dd>

        </tr>

        @{
            // Hardcoded list of possible personality types.
            var personalityoptions = new List<string>() { "INTJ", "INTP", "ENTJ", "ENTP", "ISTP", "ISFP", "ESTP", "ESFP", "ISTJ", "ISFJ", "ESTJ", "ESFJ", "INFJ", "INFP", "ENFJ", "ENFP" };

            // List to hold output to insert into radar-chart
            var personalityOccurence = new List<int>(new int[16]);

            // Get list w. employees personality types
            var personalitiesInSystem = new List<string>();
            foreach (var item in Model.Team.EmpTeams)
            {
            personalitiesInSystem.Add(item.Employee.PersonalityType);
            }

            // Iterate over possible personalities, if employee has persoanlity, +1 to occurrence list
            int index = 0;
            foreach (var item in personalityoptions)
            {
            int occurenceOfTypes = personalitiesInSystem.FindAll(personalities => personalities == item).Count();
            personalityOccurence[index] = occurenceOfTypes;
            index++;
            }
        }

        <!--Configuration of radar chart-->
        <script>
         // Convert c# lists to javascript arrays to insert into radar-chart
            var EmployeeCompetenceOccurence = @Html.Raw(Json.Serialize(personalityOccurence));
            var EmployeeLabels = @Html.Raw(Json.Serialize(personalityoptions));

            Chart.defaults.global.legend.display = false;
            var ctx = document.getElementById("myChart").getContext("2d");
            var myRadarChart = new Chart(ctx, {
                type: 'radar',
                options: {
                    startAngle: 12,
                    scale: {
                         ticks: {
                            display: false,
                        }
                      }
                },
                data: {
                    labels: EmployeeLabels,
                    datasets: [{
                        data: EmployeeCompetenceOccurence,
                        backgroundColor: "rgba(40, 167, 69, 0.2)",
                        borderColor: "rgba(40, 167, 69, 1)",
                        responsive: true
                    }],
                }
            });

            // Stacked canvas to provide an axis to categorize personality types.
            var c = document.getElementById("myCanvas");
            var ctx = c.getContext("2d");
            ctx.setLineDash([5]);
            // X-axis
            ctx.moveTo(0, 200);
            ctx.lineTo(400, 200);
            ctx.stroke();
            // Y-axis
            ctx.moveTo(200, 0);
            ctx.lineTo(200, 400);
            ctx.stroke();
        </script>

        <style>
            .canvasWrapper {
                position: relative;
                width: 400px;
                height: 400px;
            }

                .canvasWrapper canvas {
                    position: absolute;
                    text-align: center;
                    align-items: center;
                    align-content: center;
                    top: 0;
                    left: 0;
                }

            #Analysts {
                position: absolute;
                top: 0;
                right: 0;
            }

            #Diplomats {
                position: absolute;
                top: 0;
                left: 0;
            }

            #Sentinels {
                position: absolute;
                bottom: 0;
                left: 0;
            }

            #Explorers {
                position: absolute;
                bottom: 0;
                right: 0;
            }

            .fa-question-circle:hover {
                color: lightgrey;
            }
        </style>




    </dl>
</div>