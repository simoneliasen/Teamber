#pragma checksum "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4373d9af4230b4cc3ca83f2de8749f6b793d4f51"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(ContosoUniversity.Pages.Teams.Pages_Teams_Create), @"mvc.1.0.razor-page", @"/Pages/Teams/Create.cshtml")]
namespace ContosoUniversity.Pages.Teams
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Daniel\Teamber\Pages\_ViewImports.cshtml"
using ContosoUniversity;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4373d9af4230b4cc3ca83f2de8749f6b793d4f51", @"/Pages/Teams/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c4c0473ebe7d620ab1ae06d83bc5bc87bf314407", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Teams_Create : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("text-danger"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("teamSynergy"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("darkBG padThree"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("fade-in"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
  
    ViewData["Title"] = "Create";
    if (String.IsNullOrEmpty(Model.Login) || String.IsNullOrEmpty(Model.Manager))
                Response.Redirect("/Login/Login");


#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4373d9af4230b4cc3ca83f2de8749f6b793d4f516248", async() => {
                WriteLiteral(@"
        <div class=""container removePad"" style=""padding-bottom: 1%"">
            <div class=""row row-cols-3 darkBG"" style=""margin-left: 1.2%;"">
                <div class=""col-1.5 padOne"">
                    <h2 class=""padTwoTop"">Manage Team:</h2>
                </div>
                <div class=""col-1.5 padOne"">
                    <h2 class=""padTwoTop"">Team Composition</h2>
                </div>
            </div>
        </div>

        <div class=""container"">
            <div class=""row row-cols-2"">
                <div class=""col-4"">
                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4373d9af4230b4cc3ca83f2de8749f6b793d4f517109", async() => {
                    WriteLiteral("\r\n\r\n                            ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("div", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4373d9af4230b4cc3ca83f2de8749f6b793d4f517407", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper);
#nullable restore
#line 27 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper.ValidationSummary = global::Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly;

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-summary", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper.ValidationSummary, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                            <h4>Team Name</h4>\r\n                            <div class=\"form-group\">\r\n                                <!--<label asp-for=\"Team.Title\" class=\"control-label\"></label>-->\r\n                                ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4373d9af4230b4cc3ca83f2de8749f6b793d4f519349", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#nullable restore
#line 31 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Team.Title);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                                ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("span", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4373d9af4230b4cc3ca83f2de8749f6b793d4f5110987", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper);
#nullable restore
#line 32 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Team.Title);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-for", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                            </div>\r\n                            ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4373d9af4230b4cc3ca83f2de8749f6b793d4f5112736", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
#nullable restore
#line 34 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Team.Synergy);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral(@"
                            <!--
    <div class=""form-group"">
        <label asp-for=""Team.Synergy"" class=""control-label""></label>
        <input asp-for=""Team.Synergy"" class=""form-control"" id=""teamSynergy"" />
        <span asp-validation-for=""Team.Synergy"" class=""text-danger""></span>
    </div>-->

                            <hr>
                            <div>
                                <p>Questionnaires</p>

");
#nullable restore
#line 46 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                  

                                    foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                    {
                                        if (true)
                                        {

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                            ");
                    WriteLiteral("\r\n");
#nullable restore
#line 53 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                        }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                        ");
                    WriteLiteral("\r\n                                        <button type=\"button\" onclick=\"showHideRelatedCompetences(this.id)\"");
                    BeginWriteAttribute("id", "\r\n                                                id=\"", 2478, "\"", 2582, 2);
#nullable restore
#line 56 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 2532, questionnaire.QuestionnaireID, 2532, 30, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 2562, "-questionnaireButton", 2562, 20, true);
                    EndWriteAttribute();
                    WriteLiteral(" class=\"questionnaireButton\">\r\n                                            ");
#nullable restore
#line 57 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                       Write(questionnaire.Title);

#line default
#line hidden
#nullable disable
                    WriteLiteral("\r\n                                        </button>\r\n");
                    WriteLiteral("                                        ");
                    WriteLiteral("\r\n");
#nullable restore
#line 61 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                    }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                    ");
                    WriteLiteral("\r\n");
                    WriteLiteral(@"                            </div>
                            <div class=""form-group"" style=""display: none"">
                                <div class=""table"">
                                    <table>
                                        <tr>
                                            Questionnaires
                                        </tr>
                                        <tr>
");
#nullable restore
#line 72 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                              
                                                int cnt2 = 0;

                                                foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                                {
                                                    if (cnt2++ % 3 == 0)
                                                    {

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                    ");
                    WriteLiteral("</tr><tr>\r\n");
#nullable restore
#line 80 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                    }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                    ");
                    WriteLiteral(@"<td>
                                                        <input type=""checkbox""
                                                               name=""selectedQuestionnaires""
                                                               onclick=""showHideRelatedCompetences(this.id)""");
                    BeginWriteAttribute("id", "\r\n                                                               id=\"", 4171, "\"", 4284, 2);
#nullable restore
#line 85 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 4240, questionnaire.QuestionnaireID, 4240, 30, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 4270, "-questionnaire", 4270, 14, true);
                    EndWriteAttribute();
                    BeginWriteAttribute("value", "\r\n                                                               value=\"", 4285, "\"", 4387, 1);
#nullable restore
#line 86 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 4357, questionnaire.QuestionnaireID, 4357, 30, false);

#line default
#line hidden
#nullable disable
                    EndWriteAttribute();
                    WriteLiteral("\r\n                                                               ");
#nullable restore
#line 87 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                           Write(Html.Raw(questionnaire.Assigned ? "checked=\"checked\"" : ""));

#line default
#line hidden
#nullable disable
                    WriteLiteral(" />\r\n");
#nullable restore
#line 88 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                   Write(questionnaire.Title);

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                    ");
                    WriteLiteral("</td>\r\n");
#nullable restore
#line 90 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                            ");
                    WriteLiteral("</tr>\r\n");
                    WriteLiteral(@"                                        </table>
                                    </div>
                                </div>
                                <br />
                                <div class=""form-group"">
                                    <div class=""table"">
                                        <table>
                                            <tr>
                                                Competences
                                            </tr>
                                            <tr>
");
#nullable restore
#line 104 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                  
                                                    int cnt3 = 0;

                                                    foreach (var competence in Model.AllCompetencesDataList)
                                                    {
                                                        if (cnt3++ % 2 == 0)
                                                        {

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                        ");
                    WriteLiteral("</tr><tr>\r\n");
#nullable restore
#line 112 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                        }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                        ");
                    WriteLiteral("<td class=\"");
#nullable restore
#line 113 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                                Write(competence.QuestionnaireID);

#line default
#line hidden
#nullable disable
                    WriteLiteral(@"-Qclass startHidden"">
                                                            <input type=""checkbox""
                                                                   style=""display: none;""
                                                                   name=""selectedCompetences""");
                    BeginWriteAttribute("id", "\r\n                                                                   id=\"", 6300, "\"", 6421, 2);
#nullable restore
#line 117 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 6373, competence.QuestionnaireCompetenceID, 6373, 37, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 6410, "-competence", 6410, 11, true);
                    EndWriteAttribute();
                    BeginWriteAttribute("value", "\r\n                                                                   value=\"", 6422, "\"", 6535, 1);
#nullable restore
#line 118 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 6498, competence.QuestionnaireCompetenceID, 6498, 37, false);

#line default
#line hidden
#nullable disable
                    EndWriteAttribute();
                    WriteLiteral("\r\n                                                                   checked=\"checked\" />\r\n");
#nullable restore
#line 120 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                       Write(competence.Criteria);

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                        ");
                    WriteLiteral("</td>\r\n                                                        ");
                    WriteLiteral("<td class=\"");
#nullable restore
#line 122 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                                Write(competence.QuestionnaireID);

#line default
#line hidden
#nullable disable
                    WriteLiteral(@"-Qclass startHidden"">
                                                            <input type=""number"" min=""0"" max=""5""
                                                                   name=""selectedCompetencesValue""
                                                                   onchange=""calculateSynergies(this.id); calculateTeamSynergy(); checkOrUncheckQuestionnaire(this.id)""");
                    BeginWriteAttribute("id", "\r\n                                                                   id=\"", 7258, "\"", 7384, 2);
#nullable restore
#line 126 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 7331, competence.QuestionnaireCompetenceID, 7331, 37, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 7368, "-competenceValue", 7368, 16, true);
                    EndWriteAttribute();
                    WriteLiteral("\r\n                                                                   value=\"0\"\r\n                                                                   ");
#nullable restore
#line 128 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                               Write(Html.Raw(competence.Assigned ? "checked=\"checked\"" : ""));

#line default
#line hidden
#nullable disable
                    WriteLiteral(" />\r\n                                                        ");
                    WriteLiteral("</td>\r\n");
#nullable restore
#line 130 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                    }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                ");
                    WriteLiteral("</tr>\r\n");
                    WriteLiteral(@"                                            </table>
                                        </div>
                                    </div>
                                    <div class=""form-group"">
                                        <input type=""submit"" value=""Create"" class=""btn btn-success"" />
                                    </div>

                        <hr>
                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_5.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                </div>
                <div class=""col-8"">
                    <div class=""row row-cols-2"">
                        <div class=""col"" align=""center"">
                            <h4>Competence synergy</h4>
                            <div class=""col-md-6"">
                                <div id=""indicatorContainer"">
                                </div>
                            </div>
                        </div>

                        <div class=""col"" align=""center"">
                            <h4>Personality overview</h4>
                            <!-- radar start kode-->
                            <!-- Import chart.js framework-->
                            <script src=""https://cdn.jsdelivr.net/npm/chart.js@2.8.0""></script>

                            <!-- Import icons-->
                            <script src=""https://kit.fontawesome.com/c869845de6.js"" crossorigin=""anonymous""></script>

                            <!-- Stacked canvases provinding a cust");
                WriteLiteral(@"omized radar chart.-->
                            <div class=""canvasWrapper"" width=""300"" heigth=""300"">
                                <canvas id=""myCanvas"" width=""300"" height=""300""></canvas>
                                <canvas id=""myChart"" width=""300"" height=""300""></canvas>

                                <p id=""Analysts"">
                                    Analysts
                                    <i class=""far fa-question-circle"" type=""button"" data-toggle=""tooltip"" data-placement=""top""
                                       title=""Intuitive (N) and Thinking (T) personality types, known for their rationality, impartiality and intellectual excellence"">
                                    </i>
                                </p>

                                <p id=""Diplomats"">
                                    Diplomats
                                    <i class=""far fa-question-circle"" type=""button"" data-toggle=""tooltip"" data-placement=""top""
                                  ");
                WriteLiteral(@"     title=""Intuitive (N) and Feeling (F) personality types, known for their empathy, diplomatic skills, and passionate idealism"">
                                    </i>
                                </p>

                                <p id=""Sentinels"">
                                    Sentinels
                                    <i class=""far fa-question-circle"" type=""button"" data-toggle=""tooltip"" data-placement=""top""
                                       title=""Observant (S) and Judging (J) personality types, known for their practicality and focus on order, security, and stability"">
                                    </i>
                                </p>

                                <p id=""Explorers"">
                                    Explorers
                                    <i class=""far fa-question-circle"" type=""button"" data-toggle=""tooltip"" data-placement=""top""
                                       title=""Observant (S) and Prespecting (P) persoanlity types, know");
                WriteLiteral(@"n for their spontaneity, ingenuity, and ability to live in the moments"">
                                    </i>
                                </p>
                            </div>
                            </tr>

                            <!--Configuration of radar chart-->
                            <script>
                                function createRadar() {
                                    // initialize arrays to populate radarchart
                                    const personalityoptions = [""INTJ"", ""INTP"", ""ENTJ"", ""ENTP"", ""ISTP"", ""ISFP"", ""ESTP"", ""ESFP"", ""ISTJ"", ""ISFJ"", ""ESTJ"", ""ESFJ"", ""INFJ"", ""INFP"", ""ENFJ"", ""ENFP""];
                                    var personalityOccurence = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

                                    // get data from all checked employee checkboxes
                                    var checkedCheckBoxes = document.querySelectorAll('input[name=selectedEmployees]:checked');

                            ");
                WriteLiteral(@"        // for each personalitytype
                                    for (var i = 0; i < personalityoptions.length; i++) {

                                        // for earch checked employee
                                        for (var x = 0; x < checkedCheckBoxes.length; x++) {

                                            // if checked employee box matches a personality from list, add +1 in occurence array
                                            if (personalityoptions[i] == checkedCheckBoxes[x].attributes[5].nodeValue) {
                                                personalityOccurence[i] += 1;
                                            }
                                        }
                                    }

                                    Chart.defaults.global.legend.display = false;
                                    var ctx = document.getElementById(""myChart"").getContext(""2d"");
                                    var myRadarChart = new Chart(ctx, {
        ");
                WriteLiteral(@"                                type: 'radar',
                                        options: {
                                            startAngle: 12,
                                            scale: {
                                                ticks: {
                                                    display: false,
                                                }
                                            }
                                        },
                                        data: {
                                            labels: personalityoptions,
                                            datasets: [{
                                                data: personalityOccurence,
                                                backgroundColor: ""rgba(40, 167, 69, 0.2)"",
                                                borderColor: ""rgba(40, 167, 69, 1)"",
                                                responsive: true
                                       ");
                WriteLiteral(@"     }],
                                        }
                                    });

                                    // Stacked canvas to provide an axis to categorize personality types.
                                    var c = document.getElementById(""myCanvas"");
                                    var ctx = c.getContext(""2d"");
                                    ctx.setLineDash([5]);
                                    // X-axis
                                    ctx.moveTo(0, 150);
                                    ctx.lineTo(300, 150);
                                    ctx.stroke();
                                    // Y-axis
                                    ctx.moveTo(150, 0);
                                    ctx.lineTo(150, 300);
                                    ctx.stroke();
                                }
                                window.onload = createRadar;
                            </script>

                            <style>
          ");
                WriteLiteral(@"                      .canvasWrapper {
                                    position: relative;
                                    width: 300px;
                                    height: 300px;
                                }

                                    .canvasWrapper canvas {
                                        position: absolute;
                                        text-align: center;
                                        align-items: center;
                                        align-content: center;
                                        top: 0;
                                        left: 0;
                                    }

                                #Analysts {
                                    position: absolute;
                                    top: 0;
                                    right: 0;
                                }

                                #Diplomats {
                                    position: absolute;
    ");
                WriteLiteral(@"                                top: 0;
                                    left: 0;
                                }

                                #Sentinels {
                                    position: absolute;
                                    bottom: 0;
                                    left: 0;
                                }

                                #Explorers {
                                    position: absolute;
                                    bottom: 0;
                                    right: 0;
                                }

                                .fa-question-circle:hover {
                                    color: lightgrey;
                                }
                            </style>



                            <!-- radar slut kode-->
                        </div>
                    </div>

                    <br>
                    <div class=""row"">
                        <h4>Team overview</h4>
        ");
                WriteLiteral(@"                <table class=""table table-striped"">
                            <tr>
                                <td>
                                    <span id=""teamMembers""></span>
                                </td>
                            </tr>
                        </table>

                    </div>
                    <br />


                    <div class=""row"">
                        <h4>Suggested team members</h4>
                        <table class=""table table-striped"">
                            <thead>
                                <tr>
                                    <th scope=""col"">ID</th>
                                    <th scope=""col"">Name</th>
                                    <th scope=""col"">Synergy-score</th>
                                    <th scope=""col""></th>
                                </tr>
                            </thead>
                            <tbody>
                                <div class=""row"" id=""employe");
                WriteLiteral("eList\">\r\n");
#nullable restore
#line 338 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                      
                                        int cnt = 0;

                                        foreach (var employee in Model.AssignedEmployeeDataList)
                                        {
                                            if (cnt++ % 3 == 0)
                                            {

#line default
#line hidden
#nullable disable
                WriteLiteral("                                                ");
                WriteLiteral("\r\n");
#nullable restore
#line 346 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                            }

#line default
#line hidden
#nullable disable
                WriteLiteral("                                            ");
                WriteLiteral("<div class=\"col-md-4\" id=\"");
#nullable restore
#line 347 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                                   Write(employee.EmployeeID);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"-outerDiv"">
                                            <!-- måske tilføj en class her?-->
                                                <p>
                                                    <tr>
                                                        <td ><span");
                BeginWriteAttribute("id", " id=\"", 19300, "\"", 19330, 2);
#nullable restore
#line 351 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 19305, employee.EmployeeID, 19305, 20, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 19325, "-name", 19325, 5, true);
                EndWriteAttribute();
                WriteLiteral(">");
#nullable restore
#line 351 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                                                             Write(employee.FullName);

#line default
#line hidden
#nullable disable
                WriteLiteral("</span></td>\r\n                                                        <td><span");
                BeginWriteAttribute("id", " id=\"", 19429, "\"", 19454, 1);
#nullable restore
#line 352 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 19434, employee.EmployeeID, 19434, 20, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(">0</span> %</td>\r\n                                                        <td><span>");
#nullable restore
#line 353 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                                             Write(employee.JobTitle);

#line default
#line hidden
#nullable disable
                WriteLiteral("</span></td>\r\n                                                        <td><input type=\"checkbox\"\r\n       onchange=\"calculateTeamSynergy(); createRadar(); addToMemberList(this.id);\"\r\n       name=\"selectedEmployees\"");
                BeginWriteAttribute("id", "\r\n       id=\"", 19770, "\"", 19812, 2);
#nullable restore
#line 357 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 19783, employee.EmployeeID, 19783, 20, false);

#line default
#line hidden
#nullable disable
                WriteAttributeValue("", 19803, "-employee", 19803, 9, true);
                EndWriteAttribute();
                BeginWriteAttribute("value", "\r\n       value=\"", 19813, "\"", 19849, 1);
#nullable restore
#line 358 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 19829, employee.EmployeeID, 19829, 20, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral("\r\n       ");
#nullable restore
#line 359 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
   Write(Html.Raw(employee.Assigned ? "checked=\"checked\"" : ""));

#line default
#line hidden
#nullable disable
                WriteLiteral("\r\n       class=\"");
#nullable restore
#line 360 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
          Write(Html.Raw(employee.PersonalityType));

#line default
#line hidden
#nullable disable
                WriteLiteral("\" /></td>\r\n                                                    </tr>\r\n                                                </p>\r\n                                            ");
                WriteLiteral("</div>\r\n");
#nullable restore
#line 364 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                                        }

#line default
#line hidden
#nullable disable
                WriteLiteral("                                        ");
                WriteLiteral("\r\n");
                WriteLiteral(@"                                </div>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
        <br>
        </div>
        <br><br>
        </div>
        </div>
        </div>

        <footer id=""sticky-footer"" class=""py-4 bg-dark text-white-50 fixed-bottom"">
            <div class=""container text-center"">
                <small>Copyright &copy; Teamber 2020</small>
            </div>
        </footer>
    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            <style>\r\n                .startHidden {\r\n                    display: none;\r\n                }\r\n            </style>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
#nullable restore
#line 394 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
                  await Html.RenderPartialAsync("_ValidationScriptsPartial");

#line default
#line hidden
#nullable disable
                WriteLiteral("            ");
            }
            );
            WriteLiteral(@"


            <script type=""text/javascript"" src=""../js/radialIndicator.js""></script>
            <script type=""text/javascript"">

    //sættes bare til det første questionnaire for at undgå fejl når man tilføjer uden at have valgt questionnaire.
                var activeQuestionnaireButton = """";
                



function addToMemberList(employee) {
    var employeeID = employee.split(""-"")[0];
    var elementExists = document.getElementById("""" + employeeID + ""-teamMember""); //altså er han allerede tilføjet?

    if (elementExists == null) {
        var name = document.getElementById("""" + employeeID + ""-name"").innerHTML;
        var synergy = document.getElementById(employeeID).innerHTML;


        var node = document.createElement(""li"");
        node.setAttribute(""id"", """" + employeeID + ""-teamMember"");

        var spanSynergy = document.createElement(""span"");
        node.setAttribute(""id"", """" + employeeID + ""-teamMember"");

        var activeQuestionnaire = document.getElemen");
            WriteLiteral(@"tById(activeQuestionnaireButton).innerText;

        //obs bruger ikke employeeid + memberquestionnaire samlet id'et til noget endnu. så kan være at det skal indeholde noget andet.
        node.innerHTML="""" + name + "" - <span id='"" + employeeID + ""-memberQuestionnaire'>"" + activeQuestionnaire + ""</span>"" + "" - <span id='"" + employeeID + ""-memberSynergy'>"" + synergy + ""</span> %"";
        document.getElementById(""teamMembers"").appendChild(node);

        //til sidst vil vi ændre valuen på employeensid, så den også indeholder den questionnaire han er blevet tilføjet som. fx front end som er id: 1
        var activeQuestionnaireID = activeQuestionnaireButton.split(""-"")[0];
        document.getElementById("""" + employeeID + ""-employee"").value = """" + employeeID + ""-"" + activeQuestionnaireID;
    }
    else {
        var item = document.getElementById("""" + employeeID + ""-teamMember"");
        item.parentNode.removeChild(item);
    }
                }


                function updateMemberSynergy(em");
            WriteLiteral(@"ployeeID) {
                    var elementExists = document.getElementById("""" + employeeID + ""-teamMember"");
                    if (elementExists != null) {
                        var synergy = document.getElementById(employeeID).innerHTML;
                        document.getElementById("""" + employeeID + ""-memberSynergy"").innerHTML = synergy;
                    }
                }


                function checkOrUncheckQuestionnaire(competence) {
                    var competenceID = competence.split(""-"")[0];
                    var chosen = false;
                    var questionnaireNumber = 0;
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) {
                            questionnaireNumber = i;
                        }

                    }

                    for (var k in QuestionnaireCriterias[questionnaireNumber]) {
                        if (QuestionnaireCriterias[questionna");
            WriteLiteral(@"ireNumber][k] > 0) {
                            chosen = true;
                        }
                    }

                    document.getElementById("""" + questionnaireNumber + ""-questionnaire"").checked = chosen;
                }



    //Intialiazation
var radialObj = radialIndicator('#indicatorContainer', {
    barColor: {
        0: '#a1ffa7',
        //33: '#FFFF00',
        //66: '#0066FF',
        100: '#00660e'
    },
    barWidth: 15,
    percentage: true,
    frameTime: 7,
    initValue : 0
});





    //opdateres ikke.
    ");
#nullable restore
#line 490 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
Write(Model.AllEmpCompetencesString);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n    //opdateres ikke.\r\n    ");
#nullable restore
#line 493 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
Write(Model.AllEmpQuestionnairesString);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n   //opdateres live. Ud fra user input i kriterierne.\r\n    ");
#nullable restore
#line 496 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
Write(Model.AllQuestionnairesString);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n\r\n\r\n    //bare et array over alle questionnaires:\r\n    ");
#nullable restore
#line 501 "C:\Users\Daniel\Teamber\Pages\Teams\Create.cshtml"
Write(Model.AllQuestionnaireTitlesString);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"


    /*
var QuestionnaireCriterias = {
	1:{
		1: 5,
		2: 3,
		3: 1
	},
	2:{
		4: 5, //Næste step: få den her data til at opdatere automatisk ud fra hvad brugeren vælger af kriterier. Derefter loop over alle employees. Izzy.
		5: 5,
		6: 4
	}
}
*/
    //hent dem ind ligesom ved de andre, for det eneste der skal ændres er jo priorityen.
    //når man skal opdatere: get quistionnaireid, get questionnaireComepetenceID. og så sig QuestionnaireCriterias[questionnaireID][questionnaireCompetenceID] = valuen.





                //https://stackoverflow.com/questions/5066925/javascript-only-sort-a-bunch-of-divs 
                function sortEmployeesBySynergy() {
                    var toSort = document.getElementById('employeeList').children;
                    toSort = Array.prototype.slice.call(toSort, 0);

                    toSort.sort(function(a, b) {
                        var empID = a.id.split(""-"")[0];
                        var aord = +document.getElementById(empID).inne");
            WriteLiteral(@"rText;

                        var empID2 = b.id.split(""-"")[0];
                        var bord = +document.getElementById(empID2).innerText;

                        // two elements never have the same ID hence this is sufficient:
                        return (aord <= bord) ? 1 : -1;
                    });

                    var parent = document.getElementById('employeeList');
                    parent.innerHTML = """";

                    for(var i = 0, l = toSort.length; i < l; i++) {
                        parent.appendChild(toSort[i]);
                    }
                }







//document.getElementById(""teamSynergy"").innerHTML = EmpQuestionnaires[11][1];

    //find de questionnaires der er vinget af og foreach kør nedenstående

    function calculateTeamSynergy() {
        var employeeSynergies = selectedEmployees();

        var totalScores = 0;
        for (var employeeSynergy in employeeSynergies) {
            totalScores += parseInt(employeeSynergies[em");
            WriteLiteral(@"ployeeSynergy]);
        }
        var average = totalScores / employeeSynergies.length;
        var synergy = Math.round(average);

        if (employeeSynergies.length != 0) {
            document.getElementById(""teamSynergy"").value = synergy;
            radialObj.animate(synergy);
        }
        else {
            document.getElementById(""teamSynergy"").value = 0;
        radialObj.animate(0);
        }

    }




    function showHideRelatedCompetences(questionnaire) {
        var questionnaireSplit = questionnaire.split(""-"");
        var questionnaireID = questionnaireSplit[0];

        //og opdaterer lige en global variabel
        activeQuestionnaireButton = """" + questionnaireID + ""-questionnaireButton"";
        hideAllCompetences();
        document.getElementById(questionnaire).style.backgroundColor = 'lightblue';
        var competences = document.getElementsByClassName("""" + questionnaireID + ""-Qclass"");
        for (var i in competences) {
            var checkStatus");
            WriteLiteral(@" = true;
                //document.getElementById(questionnaire).checked;
            if (checkStatus) {
                try {
                    competences[i].style.display = 'table-cell';
                }
                catch (err) {

                }

            }
            else {
                try {
                    competences[i].style.display = 'none';
                }
                catch (err) {

                }

            }

        }

        //skal lige resette employee synergies til 0. pga. man skifter til den nye tab
        var exampleCompetence = 0;
        for (var i in QuestionnaireCriterias[questionnaireID]) {
            exampleCompetence = i;
        }

        var exampleCompetenceString = """" + exampleCompetence + ""-competenceValue"";
        calculateSynergies(exampleCompetenceString);
   }

                function hideAllCompetences() {
                    var competences = document.getElementsByClassName(""startHidden"");

         ");
            WriteLiteral(@"           for (var i = 0; i < competences.length; i++) {
                        competences[i].style.display = 'none';
                    }

                    var questionnaireButtons = document.getElementsByClassName(""questionnaireButton"");

                    for (var i = 0; i < questionnaireButtons.length; i++) {
                        questionnaireButtons[i].style.backgroundColor = 'white';
                    }
                }



    function selectedEmployees() {
        var checkedEmployees = [];
        for (var employee in EmpQuestionnaires){
            if (EmpQuestionnaires.hasOwnProperty(employee)) {
                var temp = document.getElementById("""" + employee + ""-employee"").checked;
                if (temp) {
                    var employeeSynergy = document.getElementById(employee).innerHTML;
                    //alert(""employee er"" + employee);
                    //alert(""employee synergy er "" + employeeSynergy);
                    checkedEmployees.push(e");
            WriteLiteral(@"mployeeSynergy);

                        }
                    }
        }
        return checkedEmployees;
    }







    function selectedQuestionnaires() {
        var checkedQuestionnaires = [];
        for (var questionnaire in QuestionnaireTitles){
            if (QuestionnaireTitles.hasOwnProperty(questionnaire)) {
                var temp = document.getElementById("""" + QuestionnaireTitles[questionnaire] + ""-questionnaire"").checked;
                if (temp) {
                    checkedQuestionnaires.push(QuestionnaireTitles[questionnaire]);

                        }
                    }
        }
        return checkedQuestionnaires;
    }



                function calculateSynergies(competence) {
                    var competenceID = competence.split(""-"")[0];
                    var questionnaireNumber = 0;
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) {
      ");
            WriteLiteral(@"                      questionnaireNumber = i;
                        }

                    }

                    questionnaireID = parseInt(questionnaireNumber);
                    //alert("""" + questionnaireID + "" er det her."");

                    updateQuestionnaireCriterias();
                    var maxScore = calculateMaxScore(questionnaireID);

                for (var employee in EmpQuestionnaires) {
                    if (EmpQuestionnaires.hasOwnProperty(employee)) {
                        var employeeID = parseInt(employee);

                        if (EmpQuestionnaires[employee].includes(questionnaireID)) { //altså hvis employeen er tilknyttet det givne questionnaire

                            calculateEmployeeSynergy(employeeID, questionnaireID, maxScore);
                            updateMemberSynergy(employeeID);
                            //alert(""max score er igen: "" + maxScore + "" "" + typeof maxScore);
                        }
                        else if ");
            WriteLiteral(@"(document.getElementById("""" + employee + ""-teamMember"") == null) {
                            //hvis han ikke i forvejen er valgt, skal hans synergy sættes til 0.
                            //alert(""han er ikke med i spørgeskemaet og heller ikke teamet"");
                             document.getElementById("""" + employee).innerHTML = 0;

                        }
                        else {
                            //alert(""han er ikke med i spørgeskemaet, men han er med i teamet."");
                            //derfor gør vi ingenting
                        }
                    }
                    }
                    sortEmployeesBySynergy(); //og til sidst vil vi så sortere employees efter synergy
}

                /*function calculateSynergies() {
        var chosenQuestionnaires = selectedQuestionnaires();
        updateQuestionnaireCriterias();
        for (var questionnaire in chosenQuestionnaires){
            if (chosenQuestionnaires.hasOwnProperty(questionnaire)) {");
            WriteLiteral(@"

                var questionnaireID = parseInt(chosenQuestionnaires[questionnaire]);
                var maxScore = calculateMaxScore(questionnaireID);

                for (var employee in EmpQuestionnaires) {
                    if (EmpQuestionnaires.hasOwnProperty(employee)) {
                        if (EmpQuestionnaires[employee].includes(questionnaireID)) { //altså hvis employeen er tilknyttet det givne questionnaire
                            var employeeID = parseInt(employee);
                            calculateEmployeeSynergy(employeeID, questionnaireID, maxScore);
                            updateMemberSynergy(employeeID);
                            //alert(""max score er igen: "" + maxScore + "" "" + typeof maxScore);
                        }

                    }
                }

            }
        }



    }*/


    function updateQuestionnaireCriterias() {
        var target = QuestionnaireCriterias;
	    for (var questionnaire in target){
        if (target");
            WriteLiteral(@".hasOwnProperty(questionnaire)) {
                var target2 = QuestionnaireCriterias[questionnaire];
	             for (var competence in target2){
                    if (target2.hasOwnProperty(competence)) {
                        var temp = document.getElementById("""" + competence + ""-competenceValue"").value;
                        QuestionnaireCriterias[questionnaire][competence] = temp;
                    }
                 }
            }
        }
    }



    function calculateEmployeeSynergy(employee, questionnaire, max_score) {
        var memberInChosenQuestionnaire = false;

        try {
            var memberQuestionnaireTitle = document.getElementById("""" + employee + ""-memberQuestionnaire"").innerText;
            var currentQuestionnaire = document.getElementById(activeQuestionnaireButton).innerText;

            if (memberQuestionnaireTitle == currentQuestionnaire) {
                memberInChosenQuestionnaire = true;
            }
        }
        catch (err) {
");
            WriteLiteral(@"
        }




        if (document.getElementById("""" + employee + ""-teamMember"") == null || memberInChosenQuestionnaire) {
            var totalScore = 0;
            var target = QuestionnaireCriterias[questionnaire];
            for (var competence in target) {
                if (target.hasOwnProperty(competence)) {
                    //alert(""Key is "" + competence + "", value is "" + target[competence]);
                    var competenceInt = parseInt(competence);
                    var temp = EmpCompetences[employee][competenceInt];


                    var tempInt = parseInt(temp);
                    if (tempInt > target[competenceInt]) {
                        tempInt = parseInt(target[competenceInt]);
                    }
                    totalScore += tempInt;

                }
            }
            //return totalScore;
            var tempSynergy = totalScore / max_score * 100;
            var synergy = Math.round(tempSynergy);

            if (Number.isInte");
            WriteLiteral(@"ger(synergy)) {
                document.getElementById("""" + employee).innerHTML = synergy;
            }
            else {
                document.getElementById("""" + employee).innerHTML = 0;
            }
        }
        else if (memberInChosenQuestionnaire == false) {

        }


}




function calculateMaxScore(questionnaire) {
	var maxScore = 0;
	var target = QuestionnaireCriterias[questionnaire];

	for (var competence in target){
    if (target.hasOwnProperty(competence)) {

        var temp = target[competence];
         maxScore += parseInt(temp);
    }
}
return maxScore;
}



            //til at starte med sættes activeQuestionnaireButton til det første questionnaire for at undgå trælse fejl.
                console.log(""questionnairetitles 0 er "" + QuestionnaireTitles[0]);
                try {
                    console.log(""questionnairetitles 0 er "" + QuestionnaireTitles[0]);
                    activeQuestionnaireButton = """" + QuestionnaireTitles[0] + ");
            WriteLiteral("\"-questionnaireButton\";\r\n                }\r\n                catch (err) {\r\n                    console.log(\"no questionnaires in the database.\");\r\n                }\r\n            </script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ContosoUniversity.Pages.Teams.CreateModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<ContosoUniversity.Pages.Teams.CreateModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<ContosoUniversity.Pages.Teams.CreateModel>)PageContext?.ViewData;
        public ContosoUniversity.Pages.Teams.CreateModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
