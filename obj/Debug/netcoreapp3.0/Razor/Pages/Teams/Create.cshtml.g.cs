#pragma checksum "D:\teamberting\v3\Pages\Teams\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "10718ba43a4e1c93756e94f741f3635d75425a36"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Teamber.Pages.Teams.Pages_Teams_Create), @"mvc.1.0.razor-page", @"/Pages/Teams/Create.cshtml")]
namespace Teamber.Pages.Teams
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\teamberting\v3\Pages\_ViewImports.cshtml"
using Teamber;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"10718ba43a4e1c93756e94f741f3635d75425a36", @"/Pages/Teams/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f85dbf08b510fa9fff9c89f70522c152bb221f25", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Teams_Create : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("text-danger"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-control"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", "hidden", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("teamSynergy"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("fade-in"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
  
    ViewData["Title"] = "Create";
    if (String.IsNullOrEmpty(Model.Login) || String.IsNullOrEmpty(Model.Manager))
        Response.Redirect("/Login/Login");

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "10718ba43a4e1c93756e94f741f3635d75425a365831", async() => {
                WriteLiteral(@"
    <div class=""container removePad"" style=""padding-bottom: 1%"">
        <div class=""row row-cols-3 greenBG"" style=""margin-left: 1.2%;"">
            <div class=""col-1.5 padOne"">
                <h2 class=""padTwoTop"">Create Team</h2>
            </div>
        </div>
    </div>

    <div class=""container"">
        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "10718ba43a4e1c93756e94f741f3635d75425a366426", async() => {
                    WriteLiteral("\r\n            <div class=\"row row-cols-2\">\r\n                <div class=\"col-4\">\r\n                    <div class=\"darkBG padThree\">\r\n                        ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("div", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "10718ba43a4e1c93756e94f741f3635d75425a366858", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationSummaryTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper);
#nullable restore
#line 23 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper.ValidationSummary = global::Microsoft.AspNetCore.Mvc.Rendering.ValidationSummary.ModelOnly;

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-summary", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationSummaryTagHelper.ValidationSummary, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                        <h4>Team Name</h4>\r\n                        <div class=\"form-group\">\r\n                            ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "10718ba43a4e1c93756e94f741f3635d75425a368677", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
#nullable restore
#line 26 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Team.Title);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                            ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("span", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "10718ba43a4e1c93756e94f741f3635d75425a3610305", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.ValidationMessageTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper);
#nullable restore
#line 27 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Team.Title);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-validation-for", __Microsoft_AspNetCore_Mvc_TagHelpers_ValidationMessageTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n                        </div>\r\n                        ");
                    __tagHelperExecutionContext = __tagHelperScopeManager.Begin("input", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "10718ba43a4e1c93756e94f741f3635d75425a3612040", async() => {
                    }
                    );
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.InputTagHelper>();
                    __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper);
                    __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.InputTypeName = (string)__tagHelperAttribute_2.Value;
                    __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
#nullable restore
#line 29 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.Team.Synergy);

#line default
#line hidden
#nullable disable
                    __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_InputTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                    __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                    await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                    if (!__tagHelperExecutionContext.Output.IsContentModified)
                    {
                        await __tagHelperExecutionContext.SetOutputContentAsync();
                    }
                    Write(__tagHelperExecutionContext.Output);
                    __tagHelperExecutionContext = __tagHelperScopeManager.End();
                    WriteLiteral("\r\n\r\n                        <hr>\r\n                        <div>\r\n                            <h4>Questionnaires</h4>\r\n\r\n");
#nullable restore
#line 35 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                              

                                foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                {
                                    if (true)
                                    {

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                        ");
                    WriteLiteral("\r\n");
#nullable restore
#line 42 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                    }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                    ");
                    WriteLiteral("\r\n                                    <button type=\"button\" onclick=\"showHideRelatedCompetences(this.id)\"");
                    BeginWriteAttribute("id", "\r\n                                            id=\"", 1821, "\"", 1921, 2);
#nullable restore
#line 45 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 1871, questionnaire.QuestionnaireID, 1871, 30, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 1901, "-questionnaireButton", 1901, 20, true);
                    EndWriteAttribute();
                    WriteLiteral(" class=\"questionnaireButton\">\r\n                                        ");
#nullable restore
#line 46 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                   Write(questionnaire.Title);

#line default
#line hidden
#nullable disable
                    WriteLiteral("\r\n                                    </button>\r\n");
                    WriteLiteral("                                    ");
                    WriteLiteral("\r\n");
#nullable restore
#line 50 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                ");
                    WriteLiteral("\r\n");
                    WriteLiteral(@"                        </div>
                        <div class=""form-group"" style=""display: none"">
                            <div class=""table"">
                                <table>
                                    <tr>
                                        Questionnaires
                                    </tr>
                                    <tr>
");
#nullable restore
#line 61 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                          
                                            int cnt2 = 0;

                                            foreach (var questionnaire in Model.AssignedQuestionnaireDataList)
                                            {
                                                if (cnt2++ % 3 == 0)
                                                {

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                ");
                    WriteLiteral("</tr><tr>\r\n");
#nullable restore
#line 69 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                ");
                    WriteLiteral(@"<td>
                                                    <input type=""checkbox""
                                                           name=""selectedQuestionnaires""
                                                           onclick=""showHideRelatedCompetences(this.id)""");
                    BeginWriteAttribute("id", "\r\n                                                           id=\"", 3406, "\"", 3515, 2);
#nullable restore
#line 74 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 3471, questionnaire.QuestionnaireID, 3471, 30, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 3501, "-questionnaire", 3501, 14, true);
                    EndWriteAttribute();
                    BeginWriteAttribute("value", "\r\n                                                           value=\"", 3516, "\"", 3614, 1);
#nullable restore
#line 75 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 3584, questionnaire.QuestionnaireID, 3584, 30, false);

#line default
#line hidden
#nullable disable
                    EndWriteAttribute();
                    WriteLiteral("\r\n                                                           ");
#nullable restore
#line 76 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                       Write(Html.Raw(questionnaire.Assigned ? "checked=\"checked\"" : ""));

#line default
#line hidden
#nullable disable
                    WriteLiteral(" />\r\n");
#nullable restore
#line 77 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                               Write(questionnaire.Title);

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                ");
                    WriteLiteral("</td>\r\n");
#nullable restore
#line 79 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                            }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                        ");
                    WriteLiteral("</tr>\r\n");
                    WriteLiteral(@"                                    </table>
                                </div>
                            </div>
                            <br />
                            <div class=""form-group"">
                                <div class=""table"" style=""overflow: auto;"">
                                    <table>
                                        <tr>
                                            <h4>Competences</h4>
                                        </tr>
                                        <tr>
");
#nullable restore
#line 93 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                              
                                                int cnt3 = 0;

                                                foreach (var competence in Model.AllCompetencesDataList)
                                                {
                                                    if (cnt3++ % 2 == 0)
                                                    {

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                    ");
                    WriteLiteral("</tr><tr>\r\n");
#nullable restore
#line 101 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                    }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                    ");
                    WriteLiteral("<td class=\"");
#nullable restore
#line 102 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                            Write(competence.QuestionnaireID);

#line default
#line hidden
#nullable disable
                    WriteLiteral(@"-Qclass startHidden"">
                                                        <input type=""checkbox""
                                                               style=""display: none;""
                                                               name=""selectedCompetences""");
                    BeginWriteAttribute("id", "\r\n                                                               id=\"", 5444, "\"", 5561, 2);
#nullable restore
#line 106 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 5513, competence.QuestionnaireCompetenceID, 5513, 37, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 5550, "-competence", 5550, 11, true);
                    EndWriteAttribute();
                    BeginWriteAttribute("value", "\r\n                                                               value=\"", 5562, "\"", 5671, 1);
#nullable restore
#line 107 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 5634, competence.QuestionnaireCompetenceID, 5634, 37, false);

#line default
#line hidden
#nullable disable
                    EndWriteAttribute();
                    WriteLiteral("\r\n                                                               checked=\"checked\" />\r\n");
#nullable restore
#line 109 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                   Write(competence.Criteria);

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                    ");
                    WriteLiteral("</td>\r\n                                                    ");
                    WriteLiteral("<td class=\"");
#nullable restore
#line 111 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                            Write(competence.QuestionnaireID);

#line default
#line hidden
#nullable disable
                    WriteLiteral(@"-Qclass startHidden"">
                                                        <input type=""number"" min=""0"" max=""5""
                                                               name=""selectedCompetencesValue""
                                                               onchange=""calculateSynergies(this.id); calculateTeamSynergy(); checkOrUncheckQuestionnaire(this.id)""");
                    BeginWriteAttribute("id", "\r\n                                                               id=\"", 6366, "\"", 6488, 2);
#nullable restore
#line 115 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 6435, competence.QuestionnaireCompetenceID, 6435, 37, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 6472, "-competenceValue", 6472, 16, true);
                    EndWriteAttribute();
                    WriteLiteral("\r\n                                                               value=\"0\"\r\n                                                               ");
#nullable restore
#line 117 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                           Write(Html.Raw(competence.Assigned ? "checked=\"checked\"" : ""));

#line default
#line hidden
#nullable disable
                    WriteLiteral(" />\r\n                                                    ");
                    WriteLiteral("</td>\r\n");
#nullable restore
#line 119 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                            ");
                    WriteLiteral("</tr>\r\n");
                    WriteLiteral(@"                                        </table>
                                    </div>
                                </div>
                                <div class=""form-group"">
                                    <input type=""submit"" value=""Create"" class=""btn btn-success"" />
                                </div>
                            </div>
                        </div>
                        <div class=""col-8"">
                            <div class=""row row-cols-2"">
                                <div class=""col"" align=""center"">
                                    <h4>Competence synergy</h4>
                                    <div class=""col-md-6"">
                                        <div id=""indicatorContainer"">
                                        </div>
                                    </div>
                                </div>

                                <div class=""col"" align=""center"">
                                    <h4>Personality overvie");
                    WriteLiteral(@"w</h4>
                                    <!-- radar chart code start-->
                                    <!-- Import chart.js framework-->
                                    <script src=""https://cdn.jsdelivr.net/npm/chart.js@2.8.0""></script>

                                    <!-- Import icons-->
                                    <script src=""https://kit.fontawesome.com/c869845de6.js"" crossorigin=""anonymous""></script>

                                    <!-- Stacked canvases provinding a customized radar chart.-->
                                    <div class=""canvasWrapper"" width=""300"" heigth=""300"">
                                        <canvas id=""myCanvas"" width=""300"" height=""300""></canvas>
                                        <canvas id=""myChart"" width=""300"" height=""300""></canvas>

                                        <p id=""Analysts"">
                                            Analysts
                                            <i class=""far fa-question-circle"" type=""");
                    WriteLiteral(@"button"" data-toggle=""tooltip"" data-placement=""top""
                                               title=""Intuitive (N) and Thinking (T) personality types, known for their rationality, impartiality and intellectual excellence"">
                                            </i>
                                        </p>

                                        <p id=""Diplomats"">
                                            Diplomats
                                            <i class=""far fa-question-circle"" type=""button"" data-toggle=""tooltip"" data-placement=""top""
                                               title=""Intuitive (N) and Feeling (F) personality types, known for their empathy, diplomatic skills, and passionate idealism"">
                                            </i>
                                        </p>

                                        <p id=""Sentinels"">
                                            Sentinels
                                            <i class=""far f");
                    WriteLiteral(@"a-question-circle"" type=""button"" data-toggle=""tooltip"" data-placement=""top""
                                               title=""Observant (S) and Judging (J) personality types, known for their practicality and focus on order, security, and stability"">
                                            </i>
                                        </p>

                                        <p id=""Explorers"">
                                            Explorers
                                            <i class=""far fa-question-circle"" type=""button"" data-toggle=""tooltip"" data-placement=""top""
                                               title=""Observant (S) and Prespecting (P) persoanlity types, known for their spontaneity, ingenuity, and ability to live in the moments"">
                                            </i>
                                        </p>
                                    </div>


                                    <!--Configuration of radar chart-->
                 ");
                    WriteLiteral(@"                   <script>
                                        function createRadar() {
                                            // initialize arrays to populate radarchart
                                            const personalityoptions = [""INTJ"", ""INTP"", ""ENTJ"", ""ENTP"", ""ISTP"", ""ISFP"", ""ESTP"", ""ESFP"", ""ISTJ"", ""ISFJ"", ""ESTJ"", ""ESFJ"", ""INFJ"", ""INFP"", ""ENFJ"", ""ENFP""];
                                            var personalityOccurence = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

                                            // get data from all checked employee checkboxes
                                            var checkedCheckBoxes = document.querySelectorAll('input[name=selectedEmployees]:checked');

                                            // for each personalitytype
                                            for (var i = 0; i < personalityoptions.length; i++) {

                                                // for earch checked employee
                            ");
                    WriteLiteral(@"                    for (var x = 0; x < checkedCheckBoxes.length; x++) {

                                                    // if checked employee box matches a personality from list, add +1 in occurence array
                                                    if (personalityoptions[i] == checkedCheckBoxes[x].attributes[5].nodeValue) {
                                                        personalityOccurence[i] += 1;
                                                    }
                                                }
                                            }

                                            Chart.defaults.global.legend.display = false;
                                            var ctx = document.getElementById(""myChart"").getContext(""2d"");
                                            var myRadarChart = new Chart(ctx, {
                                                type: 'radar',
                                                options: {
                                 ");
                    WriteLiteral(@"                   startAngle: 12,
                                                    scale: {
                                                        ticks: {
                                                            display: false,
                                                        }
                                                    }
                                                },
                                                data: {
                                                    labels: personalityoptions,
                                                    datasets: [{
                                                        data: personalityOccurence,
                                                        backgroundColor: ""rgba(40, 167, 69, 0.2)"",
                                                        borderColor: ""rgba(40, 167, 69, 1)"",
                                                        responsive: true
                                                    }],
   ");
                    WriteLiteral(@"                                             }
                                            });

                                            // Stacked canvas to provide an axis to categorize personality types.
                                            var c = document.getElementById(""myCanvas"");
                                            var ctx = c.getContext(""2d"");
                                            ctx.setLineDash([5]);
                                            // X-axis
                                            ctx.moveTo(0, 150);
                                            ctx.lineTo(300, 150);
                                            ctx.stroke();
                                            // Y-axis
                                            ctx.moveTo(150, 0);
                                            ctx.lineTo(150, 300);
                                            ctx.stroke();
                                        }
                                        win");
                    WriteLiteral(@"dow.onload = createRadar;
                                    </script>

                                    <style>
                                        .canvasWrapper {
                                            position: relative;
                                            width: 300px;
                                            height: 300px;
                                        }

                                            .canvasWrapper canvas {
                                                position: absolute;
                                                text-align: center;
                                                align-items: center;
                                                align-content: center;
                                                top: 0;
                                                left: 0;
                                            }

                                        #Analysts {
                                            positi");
                    WriteLiteral(@"on: absolute;
                                            top: 0;
                                            right: 0;
                                        }

                                        #Diplomats {
                                            position: absolute;
                                            top: 0;
                                            left: 0;
                                        }

                                        #Sentinels {
                                            position: absolute;
                                            bottom: 0;
                                            left: 0;
                                        }

                                        #Explorers {
                                            position: absolute;
                                            bottom: 0;
                                            right: 0;
                                        }

                                    ");
                    WriteLiteral(@"    .fa-question-circle:hover {
                                            color: lightgrey;
                                        }

                                        #indicatorContainer canvas {
                                            margin-top: 44px;
                                            margin-left: -27px;
                                        }
                                    </style>
                                    <!-- radar chart code end-->

                                </div>
                            </div>

                            <br>
                            <div class=""row"">
                                <h4>Team overview</h4>
                                <table class=""table table-striped"">
                                    <tr>
                                        <td>
                                            <span id=""teamMembers""></span>
                                        </td>
                                 ");
                    WriteLiteral(@"   </tr>
                                </table>

                            </div>
                            <br />


                            <div class=""row"">
                                <h4>Suggested team members</h4>
                                <table class=""table table-striped"">
                                    <thead>
                                        <tr>
                                            <th scope=""col"">Name</th>
                                            <th scope=""col"">Synergy-Score</th>
                                            <th scope=""col"">Job title</th>
                                            <th scope=""col""></th>
                                        </tr>
                                    </thead>
                                    <tbody id=""employeeList"">
                                        <div class=""row"">
");
#nullable restore
#line 328 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                              
                                                int cnt = 0;

                                                foreach (var employee in Model.AssignedEmployeeDataList)
                                                {
                                                    if (cnt++ % 3 == 0)
                                                    {

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                        ");
                    WriteLiteral("\r\n");
#nullable restore
#line 336 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                    }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                                    ");
                    WriteLiteral("<div class=\"col-md-4\">\r\n <!-- måske tilføj en class her?-->\r\n                                                        <p>\r\n                                                <tr");
                    BeginWriteAttribute("id", " id=\"", 19820, "\"", 19854, 2);
#nullable restore
#line 340 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 19825, employee.EmployeeID, 19825, 20, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 19845, "-outerDiv", 19845, 9, true);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n                                                    <td><span");
                    BeginWriteAttribute("id", " id=\"", 19919, "\"", 19949, 2);
#nullable restore
#line 341 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 19924, employee.EmployeeID, 19924, 20, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 19944, "-name", 19944, 5, true);
                    EndWriteAttribute();
                    WriteLiteral(">");
#nullable restore
#line 341 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                                                        Write(employee.FullName);

#line default
#line hidden
#nullable disable
                    WriteLiteral("</span></td>\r\n                                                    <td><span");
                    BeginWriteAttribute("id", " id=\"", 20044, "\"", 20069, 1);
#nullable restore
#line 342 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 20049, employee.EmployeeID, 20049, 20, false);

#line default
#line hidden
#nullable disable
                    EndWriteAttribute();
                    WriteLiteral(">0</span> %</td>\r\n                                                    <td><span>");
#nullable restore
#line 343 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                         Write(employee.JobTitle);

#line default
#line hidden
#nullable disable
                    WriteLiteral(@"</span></td>
                                                    <td>
                                                        <input type=""checkbox""
                                                               onchange=""calculateTeamSynergy(); createRadar(); addToMemberList(this.id);""
                                                               name=""selectedEmployees""");
                    BeginWriteAttribute("id", "\r\n                                                               id=\"", 20547, "\"", 20645, 2);
#nullable restore
#line 348 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 20616, employee.EmployeeID, 20616, 20, false);

#line default
#line hidden
#nullable disable
                    WriteAttributeValue("", 20636, "-employee", 20636, 9, true);
                    EndWriteAttribute();
                    BeginWriteAttribute("value", "\r\n                                                               value=\"", 20646, "\"", 20738, 1);
#nullable restore
#line 349 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
WriteAttributeValue("", 20718, employee.EmployeeID, 20718, 20, false);

#line default
#line hidden
#nullable disable
                    EndWriteAttribute();
                    WriteLiteral("\r\n                                                               ");
#nullable restore
#line 350 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                           Write(Html.Raw(employee.Assigned ? "checked=\"checked\"" : ""));

#line default
#line hidden
#nullable disable
                    WriteLiteral("\r\n                                                               class=\"");
#nullable restore
#line 351 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                                                                  Write(Html.Raw(employee.PersonalityType));

#line default
#line hidden
#nullable disable
                    WriteLiteral("\" style=\"transform: scale(2);\" />\r\n                                                    </td>\r\n                                                </tr>\r\n                                                </p>\r\n                                                ");
                    WriteLiteral("\r\n");
#nullable restore
#line 356 "D:\teamberting\v3\Pages\Teams\Create.cshtml"


                                            }

#line default
#line hidden
#nullable disable
                    WriteLiteral("                                            ");
                    WriteLiteral("\r\n");
                    WriteLiteral("\r\n                                </div>\r\n                                </tbody>\r\n                                </table>\r\n                            </div>\r\n                    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                </div>
                </div>

                </div>
                <br>
                </div>
                <br><br>
                </div>
                </div>
                </div>

                <footer id=""sticky-footer"" class=""py-4 bg-dark text-white-50 fixed-bottom"">
                    <div class=""container text-center"">
                        <small>Copyright &copy; Teamber 2020</small>
                    </div>
                </footer>
            ");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n            <style>\r\n                .startHidden {\r\n                    display: none;\r\n                }\r\n            </style>\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
#nullable restore
#line 390 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
                  await Html.RenderPartialAsync("_ValidationScriptsPartial");

#line default
#line hidden
#nullable disable
                WriteLiteral("            ");
            }
            );
            WriteLiteral(@"


            <script type=""text/javascript"" src=""../js/radialIndicator.js""></script>
            <script type=""text/javascript"">

    
                var activeQuestionnaireButton = """";
                                //Sets activeQuestionnaireButton to the first questionnaire to avoid errors
                                try {
                                    var buttons = document.getElementsByClassName(""questionnaireButton"");
                                    var first = buttons[0].id;
                                    console.log(""first er "" + first);
                                    activeQuestionnaireButton = first;
                                    console.log(""active er "" + activeQuestionnaireButton);
                                }
                                catch (err) {
                                }




function addToMemberList(employee) {
    var employeeID = employee.split(""-"")[0];
    var elementExists = document.getElementById("""" + employeeID ");
            WriteLiteral(@"+ ""-teamMember""); //Is he already a member? true/false

    if (elementExists == null) {
        var name = document.getElementById("""" + employeeID + ""-name"").innerHTML;
        var synergy = document.getElementById(employeeID).innerHTML;

        //creating the li so we can add the employee to the team member list
        var node = document.createElement(""li"");
        node.setAttribute(""id"", """" + employeeID + ""-teamMember"");

        var spanSynergy = document.createElement(""span"");
        node.setAttribute(""id"", """" + employeeID + ""-teamMember"");

        var activeQuestionnaire = document.getElementById(activeQuestionnaireButton).innerText;

        //Creates the text that is seen on the member list
        //The span have specific id's so that the data can be gathered again.
        node.innerHTML="""" + name + "" - <span id='"" + employeeID + ""-memberQuestionnaire'>"" + activeQuestionnaire + ""</span>"" + "" - <span id='"" + employeeID + ""-memberSynergy'>"" + synergy + ""</span> %"";
        docu");
            WriteLiteral(@"ment.getElementById(""teamMembers"").appendChild(node);

        //Lastly we change the employees id, so that it includes the id for the questionnaire he was associated with in the team. fx 1
        var activeQuestionnaireID = activeQuestionnaireButton.split(""-"")[0];
        document.getElementById("""" + employeeID + ""-employee"").value = """" + employeeID + ""-"" + activeQuestionnaireID;
    }
    else {//if he is already in the team, we want him removed
        var item = document.getElementById("""" + employeeID + ""-teamMember"");
        item.parentNode.removeChild(item);
    }
                }


                function updateMemberSynergy(employeeID) {
                    var elementExists = document.getElementById("""" + employeeID + ""-teamMember""); //is he a member of the team?
                    if (elementExists != null) { //is he is a member then update his synergy
                        var synergy = document.getElementById(employeeID).innerHTML;
                        document.getElement");
            WriteLiteral(@"ById("""" + employeeID + ""-memberSynergy"").innerHTML = synergy;
                    }
                }

                //Used to check which questionnaires that are associated with the team.
                //fx if a questionnaire called ""front end"" tests for c# competences, and the team have edited the c# competences to above zero
                //then the team is associated with the questionnaire ""front end"".
                function checkOrUncheckQuestionnaire(competence) {
                    var competenceID = competence.split(""-"")[0];
                    var chosen = false;
                    var questionnaireNumber = 0; //contains the index of the current questionnaire in the questionnaireCriterias dictionary
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) {
                            questionnaireNumber = i;
                        }
                    }
                    
           ");
            WriteLiteral(@"         //is any of the associated criterias above zero? if so, then the questionnaire should be checked.
                    for (var k in QuestionnaireCriterias[questionnaireNumber]) {
                        if (QuestionnaireCriterias[questionnaireNumber][k] > 0) {
                            chosen = true;
                        }
                    }

                    document.getElementById("""" + questionnaireNumber + ""-questionnaire"").checked = chosen;
                }



    //Intialiazation of the synergy score indicator.
var radialObj = radialIndicator('#indicatorContainer', {
    barColor: {
        0: '#a1ffa7',
        //33: '#FFFF00',
        //66: '#0066FF',
        100: '#00660e'
    },
    barWidth: 15,
    radius: 90,
    percentage: true,
    frameTime: 7,
    initValue : 0
});



    //These are dictionaries containing dictionaries. Based on id's. So fx employe1 {competence1: answer1}

    //Not updated live. Static data from c¤
    ");
#nullable restore
#line 500 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
Write(Model.AllEmpCompetencesString);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n    //Not updated live. Static data from c#\r\n    ");
#nullable restore
#line 503 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
Write(Model.AllEmpQuestionnairesString);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n    //updated live. Based on user input in the criterias.\r\n    ");
#nullable restore
#line 506 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
Write(Model.AllQuestionnairesString);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n\r\n\r\n    //Just an array containing the questionnaireIDs\r\n    ");
#nullable restore
#line 511 "D:\teamberting\v3\Pages\Teams\Create.cshtml"
Write(Model.AllQuestionnaireTitlesString);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"


                //Highly inpirated from https://stackoverflow.com/questions/5066925/javascript-only-sort-a-bunch-of-divs
                function sortEmployeesBySynergy() { //sorts the table of employees by synergy score.
                    var toSort = document.getElementById('employeeList').children;
                    toSort = Array.prototype.slice.call(toSort, 0);

                    toSort.sort(function(a, b) {
                        var empID = a.id.split(""-"")[0];
                        var aord = +document.getElementById(empID).innerText;

                        var empID2 = b.id.split(""-"")[0];
                        var bord = +document.getElementById(empID2).innerText;

                        // two elements never have the same ID hence this is sufficient:
                        return (aord <= bord) ? 1 : -1;
                    });

                    var parent = document.getElementById('employeeList');
                    parent.innerHTML = """";

                ");
            WriteLiteral(@"    for(var i = 0, l = toSort.length; i < l; i++) {
                        parent.appendChild(toSort[i]);
                    }
                }







    //Just calculates the average synergy for the team members. 
    function calculateTeamSynergy() {
        var employeeSynergies = selectedEmployees();

        var totalScores = 0;
        for (var employeeSynergy in employeeSynergies) {
            totalScores += parseInt(employeeSynergies[employeeSynergy]);
        }
        var average = totalScores / employeeSynergies.length;
        var synergy = Math.round(average);

        if (employeeSynergies.length != 0) {
            document.getElementById(""teamSynergy"").value = synergy;
            radialObj.animate(synergy);
        }
        else {
            document.getElementById(""teamSynergy"").value = 0;
        radialObj.animate(0);
        }

    }



    //WHen you click on a questionnaire, the associated competences should be displayed and the rest should be hi");
            WriteLiteral(@"dden.
    //function runs when a questionnaire button is clicked.
    function showHideRelatedCompetences(questionnaire) {
        var questionnaireSplit = questionnaire.split(""-"");
        var questionnaireID = questionnaireSplit[0];

        //updates the global variable. So the activeQuestionnaireButton is changed to the one that was clicked.
        activeQuestionnaireButton = """" + questionnaireID + ""-questionnaireButton"";
        hideAllCompetences();
        document.getElementById(questionnaire).style.backgroundColor = 'lightblue';
        var competences = document.getElementsByClassName("""" + questionnaireID + ""-Qclass"");//the associated criterias have this class name.
        for (var i in competences) {
            var checkStatus = true;
            
            if (checkStatus) {
                try {
                    competences[i].style.display = 'table-cell';
                }
                catch (err) {

                }

            }
            else {
         ");
            WriteLiteral(@"       try {
                    competences[i].style.display = 'none';
                }
                catch (err) {

                }

            }

        }

        //Employee synergies should be resat to 0, because the questionnaire that the synergy is based on is changed.
        var exampleCompetence = 0;
        for (var i in QuestionnaireCriterias[questionnaireID]) {
            exampleCompetence = i;
        }

        var exampleCompetenceString = """" + exampleCompetence + ""-competenceValue"";
        calculateSynergies(exampleCompetenceString); //and the the new synergies is calculated
   }

                function hideAllCompetences() {
                    var competences = document.getElementsByClassName(""startHidden""); //all competences have this class.

                    for (var i = 0; i < competences.length; i++) {
                        competences[i].style.display = 'none';
                    }

                    var questionnaireButtons = document.get");
            WriteLiteral(@"ElementsByClassName(""questionnaireButton"");

                    for (var i = 0; i < questionnaireButtons.length; i++) {
                        questionnaireButtons[i].style.backgroundColor = 'white';
                    }
                }


    //gets all of the team members.
    function selectedEmployees() {
        var checkedEmployees = [];
        for (var employee in EmpQuestionnaires){ //loops through all employeeIDs
            if (EmpQuestionnaires.hasOwnProperty(employee)) {
                var temp = document.getElementById("""" + employee + ""-employee"").checked; //is the employee a member of the team?
                if (temp) {
                    var employeeSynergy = document.getElementById(employee).innerHTML;
                    checkedEmployees.push(employeeSynergy); //added to the array
                        }
                    }
        }
        return checkedEmployees;
    }






    //Gets the questionnaires that are associated with the team. - those qu");
            WriteLiteral(@"estionnaires with criterias above zero.
    function selectedQuestionnaires() {
        var checkedQuestionnaires = [];
        for (var questionnaire in QuestionnaireTitles){ //loops through all questionnaires
            if (QuestionnaireTitles.hasOwnProperty(questionnaire)) {
                var temp = document.getElementById("""" + QuestionnaireTitles[questionnaire] + ""-questionnaire"").checked;
                if (temp) {
                    checkedQuestionnaires.push(QuestionnaireTitles[questionnaire]);

                        }
                    }
        }
        return checkedQuestionnaires;
    }


                //Runs when a criteria is changed.
                //Calculate all synergies for the employee based on the criterias belonging questionnaire
                function calculateSynergies(competence) {
                    var competenceID = competence.split(""-"")[0];
                    var questionnaireNumber = 0; //the key of the questionnaire in the questionnaireCriteri");
            WriteLiteral(@"as dictionary
                    for (var i in QuestionnaireCriterias) {
                        if (QuestionnaireCriterias[i].hasOwnProperty(competenceID)) { //if the questionnaire have this competence.
                            questionnaireNumber = i;                            //then we know that this is the belonging questionnaire
                        }

                    }

                    questionnaireID = parseInt(questionnaireNumber);
                    updateQuestionnaireCriterias(); //updates a dictionary containing team criterias.
                    var maxScore = calculateMaxScore(questionnaireID);

                for (var employee in EmpQuestionnaires) { //dictionary containing all the employees associated questionnaires.
                    if (EmpQuestionnaires.hasOwnProperty(employee)) {
                        var employeeID = parseInt(employee);

                        if (EmpQuestionnaires[employee].includes(questionnaireID)) { //if the employee is associatd");
            WriteLiteral(@" with the questionnaire

                            calculateEmployeeSynergy(employeeID, questionnaireID, maxScore); //calculate his synergy
                            updateMemberSynergy(employeeID); //updates the member list synergy, if he is in the team.
                        }
                        else if (document.getElementById("""" + employee + ""-teamMember"") == null) {
                            //if the employee dont belong to the questionnaire, then the synergy should be zero. 
                             document.getElementById("""" + employee).innerHTML = 0;

                        }
                        else {
                            //alert(""han er ikke med i spørgeskemaet, men han er med i teamet."");
                            //dont do anything
                        }
                    }
                    }
                    sortEmployeesBySynergy(); //and lastly sort the employees by synergy score.
}

                

    //Updates a dictionary cont");
            WriteLiteral(@"aining dictionaries of criterias.
    function updateQuestionnaireCriterias() {
        var target = QuestionnaireCriterias;
	    for (var questionnaire in target){ //loops through all questionnaires
        if (target.hasOwnProperty(questionnaire)) {
                var target2 = QuestionnaireCriterias[questionnaire];
	             for (var competence in target2){ //loops through all criterias for this questionnaire.
                    if (target2.hasOwnProperty(competence)) {
                        var temp = document.getElementById("""" + competence + ""-competenceValue"").value;
                        QuestionnaireCriterias[questionnaire][competence] = temp;
                    }
                 }
            }
        }
    }


    //the algorithm that calculates the employee synergy.
    function calculateEmployeeSynergy(employee, questionnaire, max_score) {

        //the first part here checks if the employee is associated with the questionnaire.
        var memberInChosenQuestion");
            WriteLiteral(@"naire = false;

        try {
            var memberQuestionnaireTitle = document.getElementById("""" + employee + ""-memberQuestionnaire"").innerText;
            var currentQuestionnaire = document.getElementById(activeQuestionnaireButton).innerText;

            if (memberQuestionnaireTitle == currentQuestionnaire) {
                memberInChosenQuestionnaire = true;
            }
        }
        catch (err) {

        }


        //if the employee is not a member of the team or is associated with the questionnaire. Then the synergy should be calculated again.
        //this basically just means that members who are not associated with the questionnaire, should keep their synergy score.
        if (document.getElementById("""" + employee + ""-teamMember"") == null || memberInChosenQuestionnaire) {
            var totalScore = 0;
            var target = QuestionnaireCriterias[questionnaire];
            for (var competence in target) { //loops thorugh all of the questionnaire's competences
");
            WriteLiteral(@"                if (target.hasOwnProperty(competence)) {
                    var competenceInt = parseInt(competence);
                    var temp = EmpCompetences[employee][competenceInt]; //What is this employees score for this competence?


                    var tempInt = parseInt(temp);
                    if (tempInt > target[competenceInt]) { //the selected criteria value is the max score for this criteria.
                        tempInt = parseInt(target[competenceInt]);
                    }
                    totalScore += tempInt;

                }
            }
            
            //calculates the synergy
            var tempSynergy = totalScore / max_score * 100;
            var synergy = Math.round(tempSynergy);

            if (Number.isInteger(synergy)) { 
                document.getElementById("""" + employee).innerHTML = synergy;
            }
            else {//if max_score is zero we get a divide-by-zero error which results in Not-A-Number. If so, we set the ");
            WriteLiteral(@"score to zero.
                document.getElementById("""" + employee).innerHTML = 0;
            }
        }
        else if (memberInChosenQuestionnaire == false) {

        }


}




function calculateMaxScore(questionnaire) {
	var maxScore = 0;
	var target = QuestionnaireCriterias[questionnaire];

	for (var competence in target){
    if (target.hasOwnProperty(competence)) {

        var temp = target[competence];
         maxScore += parseInt(temp);
    }
}
return maxScore;
}



            //At the start the variable activeQuestionnaireButton is set to the first questionnaire to avoid some errors.
                try {
                    activeQuestionnaireButton = """" + QuestionnaireTitles[0] + ""-questionnaireButton"";
                }
                catch (err) {
                    console.log(""no questionnaires in the database."");
                }
            </script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Teamber.Pages.Teams.CreateModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Teamber.Pages.Teams.CreateModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Teamber.Pages.Teams.CreateModel>)PageContext?.ViewData;
        public Teamber.Pages.Teams.CreateModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
